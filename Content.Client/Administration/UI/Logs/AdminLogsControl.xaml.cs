using System.Linq;
using System.Text.RegularExpressions;
using Content.Client.Administration.UI.CustomControls;
using Content.Shared.Administration.Logs;
using Content.Shared.Database;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using static Robust.Client.UserInterface.Controls.BaseButton;
using static Robust.Client.UserInterface.Controls.LineEdit;

namespace Content.Client.Administration.UI.Logs;

[GenerateTypedNameReferences]
public sealed partial class AdminLogsControl : Control
{
    /// <summary>
    /// <para>List of used tags can be found here: Robust.Client/UserInterface/RichText/MarkupTagManager.cs</para>
    /// <para>Pattern test online: https://regex101.com/r/3krK2I/2</para>
    /// </summary>
    private const string BBCodeRegexPattern = "((\\[|\\[/)(color|cmdlink|font|bold|italic)=?\\w*\\])";
    private readonly Comparer<AdminLogTypeButton> _adminLogTypeButtonComparer =
        Comparer<AdminLogTypeButton>.Create(
            (a, b) => string.Compare(a.Type.ToString(), b.Type.ToString(), StringComparison.Ordinal)
        );

    private readonly Comparer<AdminLogPlayerButton> _adminLogPlayerButtonComparer =
        Comparer<AdminLogPlayerButton>.Create(
            (a, b) => string.Compare(a.Text, b.Text, StringComparison.Ordinal)
        );

    public AdminLogsControl()
    {
        RobustXamlLoader.Load(this);

        TypeSearch.OnTextChanged += TypeSearchChanged;
        PlayerSearch.OnTextChanged += PlayerSearchChanged;
        LogSearch.OnTextChanged += LogSearchChanged;

        SelectAllTypesButton.OnPressed += SelectAllTypes;
        SelectNoTypesButton.OnPressed += SelectNoTypes;

        IncludeNonPlayersButton.OnPressed += IncludeNonPlayers;
        SelectAllPlayersButton.OnPressed += SelectAllPlayers;
        SelectNoPlayersButton.OnPressed += SelectNoPlayers;

        RoundSpinBox.IsValid = i => i > 0 && i <= CurrentRound;
        RoundSpinBox.ValueChanged += RoundSpinBoxChanged;
        RoundSpinBox.InitDefaultButtons();

        ResetRoundButton.OnPressed += ResetRoundPressed;

        RecievedLogs = new List<SharedAdminLog>();

        SetImpacts(Enum.GetValues<LogImpact>().OrderBy(impact => impact).ToArray());
        SetTypes(Enum.GetValues<LogType>());
        //SS220
        LowerBoundEditHours.OnTextChanged += e => OnLowerBoundHoursChange(e.Text);
        LowerBoundEditMinutes.OnTextChanged += e => OnLowerBoundMinutesChange(e.Text);
        LowerBoundEditSeconds.OnTextChanged += e => OnLowerBoundSecondsChange(e.Text);

        UpperBoundEditHours.OnTextChanged += e => OnUpperBoundHoursChange(e.Text);
        UpperBoundEditMinutes.OnTextChanged += e => OnUpperBoundMinutesChange(e.Text);
        UpperBoundEditSeconds.OnTextChanged += e => OnUpperBoundSecondsChange(e.Text);
        //SS220
    }

    private int CurrentRound { get; set; }

    public int SelectedRoundId => RoundSpinBox.Value;
    public string Search => LogSearch.Text;
    private int ShownLogs { get; set; }
    private int TotalLogs { get; set; }
    private int RoundLogs { get; set; }

    /// <summary>
    /// Storage of recieved logs
    /// </summary>
    private List<SharedAdminLog> RecievedLogs { get; set; }

    public bool IncludeNonPlayerLogs { get; set; }

    public HashSet<LogType> SelectedTypes { get; } = new();

    public HashSet<Guid> SelectedPlayers { get; } = new();

    public HashSet<LogImpact> SelectedImpacts { get; } = new();

    public void SetCurrentRound(int round)
    {
        CurrentRound = round;
        ResetRoundButton.Text = Loc.GetString("admin-logs-reset-with-id", ("id", round));
        UpdateResetButton();
    }

    public void SetRoundSpinBox(int round)
    {
        RoundSpinBox.Value = round;
        UpdateResetButton();
    }

    private void RoundSpinBoxChanged(ValueChangedEventArgs args)
    {
        UpdateResetButton();
    }

    private void UpdateResetButton()
    {
        ResetRoundButton.Disabled = RoundSpinBox.Value == CurrentRound;
    }

    private void ResetRoundPressed(ButtonEventArgs args)
    {
        RoundSpinBox.Value = CurrentRound;
    }

    private void TypeSearchChanged(LineEditEventArgs args)
    {
        UpdateTypes();
    }

    private void PlayerSearchChanged(LineEditEventArgs args)
    {
        UpdatePlayers();
    }

    private void LogSearchChanged(LineEditEventArgs args)
    {
        UpdateLogs();
    }

    private void SelectAllTypes(ButtonEventArgs args)
    {
        SelectedTypes.Clear();

        foreach (var control in TypesContainer.Children)
        {
            if (control is not AdminLogTypeButton type)
            {
                continue;
            }

            type.Pressed = true;
            SelectedTypes.Add(type.Type);
        }

        UpdateLogs();
    }

    private void SelectNoTypes(ButtonEventArgs args)
    {
        SelectedTypes.Clear();

        foreach (var control in TypesContainer.Children)
        {
            if (control is not AdminLogTypeButton type)
            {
                continue;
            }

            type.Pressed = false;
            type.Visible = ShouldShowType(type);
        }

        UpdateLogs();
    }

    private void IncludeNonPlayers(ButtonEventArgs args)
    {
        IncludeNonPlayerLogs = args.Button.Pressed;

        UpdateLogs();
    }

    private void SelectAllPlayers(ButtonEventArgs args)
    {
        SelectedPlayers.Clear();

        foreach (var control in PlayersContainer.Children)
        {
            if (control is not AdminLogPlayerButton player)
            {
                continue;
            }

            player.Pressed = true;
            SelectedPlayers.Add(player.Id);
        }

        UpdateLogs();
    }

    private void SelectNoPlayers(ButtonEventArgs args)
    {
        SelectedPlayers.Clear();

        foreach (var control in PlayersContainer.Children)
        {
            if (control is not AdminLogPlayerButton player)
            {
                continue;
            }

            player.Pressed = false;
        }

        UpdateLogs();
    }

    public void SetTypesSelection(HashSet<LogType> selectedTypes, bool invert = false)
    {
        SelectedTypes.Clear();

        foreach (var control in TypesContainer.Children)
        {
            if (control is not AdminLogTypeButton type)
            {
                continue;
            }

            if (selectedTypes.Contains(type.Type) ^ invert)
            {
                type.Pressed = true;
                SelectedTypes.Add(type.Type);
            }
            else
            {
                type.Pressed = false;
                type.Visible = ShouldShowType(type);
            }
        }

        UpdateLogs();
    }

    public void UpdateTypes()
    {
        foreach (var control in TypesContainer.Children)
        {
            if (control is not AdminLogTypeButton type)
            {
                continue;
            }

            type.Visible = ShouldShowType(type);
        }
    }

    private void UpdatePlayers()
    {
        foreach (var control in PlayersContainer.Children)
        {
            if (control is not AdminLogPlayerButton player)
            {
                continue;
            }

            player.Visible = ShouldShowPlayer(player);
        }
    }

    private void UpdateLogs()
    {
        ShownLogs = 0;
        var logsText = "";

        //SS220
        MidnightCheck(RecievedLogs);
        //SS220

        // build logs string
        for (var i = RecievedLogs.Count - 1; i >= 0; i--)
        {
            var log = RecievedLogs[i];
            if (ShouldShowLog(log))
            {
                ShownLogs++;
                logsText += string.Format(
                    "{0:HH:mm:ss} - {1}\n{2}\n\n",
                    log.Date,
                    log.Type,
                    log.Message
                );
            }
        }
        // set new text in TextEdit and clear BB tags only in result log string to
        // preserve original log messages for posible future use
        AdminLogsTextEdit.TextRope = new Robust.Shared.Utility.Rope.Leaf(
                Regex.Replace(logsText, BBCodeRegexPattern, "")
            );
        UpdateCount(ShownLogs, RecievedLogs.Count);
        ScrollLogsToBottom();
    }

    /// <summary>
    /// Try to scroll AdminLogsTextEdit to the end
    /// </summary>
    private void ScrollLogsToBottom()
    {
        // find scrollbar in TextEdit's children
        // it must be at index 1, but may be changed in future
        for (var i = 0; i < AdminLogsTextEdit.ChildCount; i++)
        {
            if (AdminLogsTextEdit.GetChild(i) is VScrollBar scrollbar)
            {
                scrollbar.ValueTarget = float.PositiveInfinity;
                break;
            }
        }
    }

    private bool ShouldShowType(AdminLogTypeButton button)
    {
        return button.Text != null &&
               button.Text.Contains(TypeSearch.Text, StringComparison.OrdinalIgnoreCase);
    }

    private bool ShouldShowPlayer(AdminLogPlayerButton button)
    {
        return button.Text != null &&
               button.Text.Contains(PlayerSearch.Text, StringComparison.OrdinalIgnoreCase);
    }

    private bool LogMatchesPlayerFilter(SharedAdminLog log)
    {
        if (log.Players.Length == 0)
            return SelectedPlayers.Count == 0 || IncludeNonPlayerLogs;

        return SelectedPlayers.Overlaps(log.Players);
    }

    private bool ShouldShowLog(SharedAdminLog log)
    {
        // Check log type
        if (!SelectedTypes.Contains(log.Type))
            return false;

        // Check players
        if (!LogMatchesPlayerFilter(log))
            return false;

        // Check impact
        if (!SelectedImpacts.Contains(log.Impact))
            return false;

        // Check search
        if (!log.Message.Contains(LogSearch.Text, StringComparison.OrdinalIgnoreCase))
            return false;
        //SS220
        if (!CheckLowerTimeFilter(log))
            return false;

        if (!CheckUpperTimeFilter(log))
            return false;
        //SS220

        return true;
    }

    private void TypeButtonPressed(ButtonEventArgs args)
    {
        var button = (AdminLogTypeButton) args.Button;
        if (button.Pressed)
        {
            SelectedTypes.Add(button.Type);
        }
        else
        {
            SelectedTypes.Remove(button.Type);
        }

        UpdateLogs();
    }

    private void PlayerButtonPressed(ButtonEventArgs args)
    {
        var button = (AdminLogPlayerButton) args.Button;
        if (button.Pressed)
        {
            SelectedPlayers.Add(button.Id);
        }
        else
        {
            SelectedPlayers.Remove(button.Id);
        }

        UpdateLogs();
    }

    private void ImpactButtonPressed(ButtonEventArgs args)
    {
        var button = (AdminLogImpactButton) args.Button;
        if (button.Pressed)
        {
            SelectedImpacts.Add(button.Impact);
        }
        else
        {
            SelectedImpacts.Remove(button.Impact);
        }

        UpdateLogs();
    }

    private void SetImpacts(LogImpact[] impacts)
    {
        LogImpactContainer.RemoveAllChildren();

        foreach (var impact in impacts)
        {
            var button = new AdminLogImpactButton(impact)
            {
                Text = impact.ToString()
            };

            SelectedImpacts.Add(impact);
            button.OnPressed += ImpactButtonPressed;

            LogImpactContainer.AddChild(button);
        }

        switch (impacts.Length)
        {
            case 0:
                return;
            case 1:
                LogImpactContainer.GetChild(0).StyleClasses.Add("OpenRight");
                return;
        }

        for (var i = 0; i < impacts.Length - 1; i++)
        {
            LogImpactContainer.GetChild(i).StyleClasses.Add("ButtonSquare");
        }

        LogImpactContainer.GetChild(LogImpactContainer.ChildCount - 1).StyleClasses.Add("OpenLeft");
    }

    private void SetTypes(LogType[] types)
    {
        var newTypes = types.ToHashSet();
        var buttons = new SortedSet<AdminLogTypeButton>(_adminLogTypeButtonComparer);

        foreach (var control in TypesContainer.Children.ToArray())
        {
            if (control is not AdminLogTypeButton type ||
                !newTypes.Remove(type.Type))
            {
                continue;
            }

            buttons.Add(type);
        }

        foreach (var type in newTypes)
        {
            var button = new AdminLogTypeButton(type)
            {
                Text = type.ToString(),
                Pressed = true
            };

            SelectedTypes.Add(type);
            button.OnPressed += TypeButtonPressed;

            buttons.Add(button);
        }

        TypesContainer.RemoveAllChildren();

        foreach (var type in buttons)
        {
            TypesContainer.AddChild(type);
        }

        UpdateLogs();
    }

    public void SetPlayers(Dictionary<Guid, string> players)
    {
        var buttons = new SortedSet<AdminLogPlayerButton>(_adminLogPlayerButtonComparer);
        var allSelected = true;

        foreach (var control in PlayersContainer.Children.ToArray())
        {
            if (control is not AdminLogPlayerButton player)
                continue;

            if (!SelectedPlayers.Contains(player.Id))
                allSelected = false;

            if (!players.Remove(player.Id))
                continue;

            buttons.Add(player);
        }

        foreach (var (id, name) in players)
        {
            var button = new AdminLogPlayerButton(id)
            {
                Text = name,
                Pressed = allSelected
            };

            if (allSelected)
                SelectedPlayers.Add(id);

            button.OnPressed += PlayerButtonPressed;

            buttons.Add(button);
        }

        PlayersContainer.RemoveAllChildren();

        foreach (var player in buttons)
        {
            PlayersContainer.AddChild(player);
        }

        UpdateLogs();
    }

    public void AddLogs(List<SharedAdminLog> logs)
    {
        RecievedLogs.AddRange(logs);
        UpdateLogs();
    }

    public void SetLogs(List<SharedAdminLog> logs)
    {
        RecievedLogs = logs;
        UpdateLogs();
    }

    public void UpdateCount(int? shown = null, int? total = null, int? round = null)
    {
        if (shown != null)
        {
            ShownLogs = shown.Value;
        }

        if (total != null)
        {
            TotalLogs = total.Value;
        }

        if (round != null)
        {
            RoundLogs = round.Value;
        }

        Count.Text = Loc.GetString(
            "admin-logs-count",
            ("showing", ShownLogs), ("total", TotalLogs), ("round", RoundLogs)
        );
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        TypeSearch.OnTextChanged -= TypeSearchChanged;
        PlayerSearch.OnTextChanged -= PlayerSearchChanged;
        LogSearch.OnTextChanged -= LogSearchChanged;

        SelectAllTypesButton.OnPressed -= SelectAllTypes;
        SelectNoTypesButton.OnPressed -= SelectNoTypes;

        IncludeNonPlayersButton.OnPressed -= IncludeNonPlayers;
        SelectAllPlayersButton.OnPressed -= SelectAllPlayers;
        SelectNoPlayersButton.OnPressed -= SelectNoPlayers;

        RoundSpinBox.IsValid = null;
        RoundSpinBox.ValueChanged -= RoundSpinBoxChanged;

        ResetRoundButton.OnPressed -= ResetRoundPressed;
    }

    //SS220 admin_logs_time_filter start

    public event Action<string>? OnLowerBoundHoursChanged;
    public event Action<string>? OnLowerBoundMinutesChanged;
    public event Action<string>? OnLowerBoundSecondsChanged;

    public event Action<string>? OnUpperBoundHoursChanged;
    public event Action<string>? OnUpperBoundMinutesChanged;
    public event Action<string>? OnUpperBoundSecondsChanged;

    public int firstLogDate = 0;//Date of the lowest date

    public void OnLowerBoundHoursChange(string text)
    {
        AdjustTextForTimer(LowerBoundEditHours, text, true);
        OnLowerBoundHoursChanged?.Invoke(LowerBoundEditHours.Text);
    }
    public void OnLowerBoundMinutesChange(string text)
    {
        AdjustTextForTimer(LowerBoundEditMinutes, text);
        OnLowerBoundMinutesChanged?.Invoke(LowerBoundEditMinutes.Text);
    }
    public void OnLowerBoundSecondsChange(string text)
    {
        AdjustTextForTimer(LowerBoundEditSeconds, text);
        OnLowerBoundSecondsChanged?.Invoke(LowerBoundEditSeconds.Text);
    }
    public void OnUpperBoundHoursChange(string text)
    {
        AdjustTextForTimer(UpperBoundEditHours, text, true);
        OnUpperBoundHoursChanged?.Invoke(UpperBoundEditHours.Text);
    }
    public void OnUpperBoundMinutesChange(string text)
    {
        AdjustTextForTimer(UpperBoundEditMinutes, text);
        OnUpperBoundMinutesChanged?.Invoke(UpperBoundEditMinutes.Text);
    }
    public void OnUpperBoundSecondsChange(string text)
    {
        AdjustTextForTimer(UpperBoundEditSeconds, text);
        OnUpperBoundSecondsChanged?.Invoke(UpperBoundEditSeconds.Text);
    }
    public bool AdjustTextForTimer(LineEdit line, string text, bool isHour = false)
    {
        List<char> toRemove = new();

        foreach (var a in text)
        {
            if (!char.IsDigit(a))
                toRemove.Add(a);
        }

        foreach (var a in toRemove)
        {
            line.Text = text.Replace(a.ToString(), "");
        }

        if (line.Text == "")
            return false;

        while (line.Text[0] == '0' && line.Text.Length > 2)
        {
            line.Text = line.Text.Remove(0, 1);
        }

        if (line.Text.Length > 2)
        {
            line.Text = line.Text.Remove(2);
        }

        if (!int.TryParse(line.Text, out var timeInt))
            return false;

        if (isHour && timeInt > 23)
            line.Text = "23";

        if (!isHour && timeInt > 59)
            line.Text = "59";

        return true;
    }
    private bool CheckLowerTimeFilter(SharedAdminLog log)
    {
        if (LowerBoundEditHours.Text == "")
            return true;

        if (!int.TryParse(LowerBoundEditHours.Text, out var hour))
            return false;

        if (log.Date.Hour < hour && firstLogDate == 0)//if date isn't same firstLogDate !=0
            return false;

        if (firstLogDate != 0 && log.Date.Day != firstLogDate)
            return true;

        if (log.Date.Hour == hour)
        {
            if (LowerBoundEditMinutes.Text == "")
                return true;

            if (!int.TryParse(LowerBoundEditMinutes.Text, out var minute))
                return false;

            if (log.Date.Minute < minute)
                return false;

            if (log.Date.Minute == minute)
            {
                if (LowerBoundEditSeconds.Text == "")
                    return true;

                if (!int.TryParse(LowerBoundEditSeconds.Text, out var second))
                    return false;

                if (log.Date.Second < second)
                    return false;
            }
        }

        return true;
    }
    private bool CheckUpperTimeFilter(SharedAdminLog log)
    {
        if (UpperBoundEditHours.Text == "")
            return true;

        if (!int.TryParse(UpperBoundEditHours.Text, out var hour))
            return false;

        if (log.Date.Hour > hour && firstLogDate == 0)//if date isn't same firstLogDate !=0
            return false;

        if (firstLogDate != 0 && log.Date.Day == firstLogDate)
            return true;

        if (log.Date.Hour == hour)
        {
            if (UpperBoundEditMinutes.Text == "")
                return true;

            if (!int.TryParse(UpperBoundEditMinutes.Text, out var minute))
                return false;

            if (log.Date.Minute > minute)
                return false;

            if (log.Date.Minute == minute)
            {
                if (UpperBoundEditSeconds.Text == "")
                    return true;

                if (!int.TryParse(UpperBoundEditSeconds.Text, out var second))
                    return false;

                if (log.Date.Second > second)
                    return false;
            }
        }

        return true;
    }

    private void MidnightCheck(List<SharedAdminLog> recievedLogs)
    {
        if (recievedLogs.Count == 0)
            return;

        if (recievedLogs[0].Date.Day != recievedLogs[recievedLogs.Count - 1].Date.Day)
        {
            firstLogDate = recievedLogs[0].Date.Day;
        }
    }

    //SS220 admin_logs_time_filter start
}
