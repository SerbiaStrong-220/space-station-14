using System.Linq;
using System.Numerics;
using Content.Client.SS220.UserInterface;
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.CriminalRecords;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.SecHudRecords.EUI;

[GenerateTypedNameReferences]
public sealed partial class SecHudRecordsMenu : FancyWindow
{
    [Dependency] private readonly IPlayerManager _player = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    private static readonly Color CatalogPanelBackgroundColor = new Color(30, 30, 30, 200);
    private static readonly Color CatalogPanelBorderColor = new Color(80, 0, 0);

    private const float CriminalStatusesScrollHeight = 150f;
    private const float CatalogPanelMaxWidth = 330f;
    private const float CatalogPanelMarginLeft = 5f;
    private const float StatusIconTextureScale = 2f;
    private const float StatusButtonWidth = 280f;
    private const float StatusButtonHeight = 32f;
    private const float PopupVerticalOffset = 2f;
    private const float CatalogPanelMargin = 6f;
    private const float RecordLabelWidth = 400f;

    private const int CatalogPanelBorderThickness = 2;
    private const int CatalogBoxSeparation = 2;

    private readonly SpriteSystem _sprite;

    private CriminalStatusPrototype? _chosenStatus;
    private string _reasonText = string.Empty;

    public NetEntity? TargetEntityId { get; set; }
    public List<(ProtoId<CriminalStatusPrototype>?, string)> FullCatalog = new();
    public GeneralStationRecord? GeneralRecord;

    public SecHudRecordsMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _sprite = _entMan.System<SpriteSystem>();

        Reason.OnTextChanged += args =>
        {
            _reasonText = args.Text;
        };

        ConfirmableButton.OnPressed += _ =>
        {
            var player = _entMan.GetNetEntity(_player.LocalEntity);
            if (_chosenStatus == null || TargetEntityId == null || player == null)
                return;

            var ev = new UpdateCriminalRecordStatusEvent(TargetEntityId.Value,
                player.Value,
                _reasonText,
                _chosenStatus);

            _entMan.RaisePredictiveEvent(ev);
            Close();
        };
    }

    public void PopulatePrototypes()
    {
        ClearContainers();
        UpdateTargetVisual();

        PopulateHistory();
        PopulateStatusSelector();
    }

    private void ClearContainers()
    {
        ChangeStatusContainer.DisposeAllChildren();
        RecordHistory.DisposeAllChildren();
        RecordSprite.ResetCharacterSpriteView();
    }

    private void UpdateTargetVisual()
    {
        if (TargetEntityId == null || GeneralRecord?.Profile == null)
        {
            RecordSprite.Visible = false;
            return;
        }

        RecordSprite.Visible = true;
        NameLabel.Text = Loc.GetString("sec-hud-records-record-name", ("name", GeneralRecord.Name));
        JobLabel.Text = Loc.GetString("sec-hud-records-record-job", ("job", GeneralRecord.JobTitle));

        var targetEnt = _entMan.GetEntity(TargetEntityId.Value);
        RecordSprite.SetupEntitySpriteView(targetEnt, _proto.Index(GeneralRecord.Profile.Species).DollPrototype);
    }

    private void PopulateHistory()
    {
        if (FullCatalog.Count == 0)
        {
            RecordHistory.AddChild(new Label { Text = Loc.GetString("sec-hud-records-no-entries") });
            return;
        }

        var catalogPanel = new PanelContainer
        {
            MaxWidth = CatalogPanelMaxWidth,
            HorizontalExpand = true,
            VerticalExpand = true,
            PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = CatalogPanelBackgroundColor,
                BorderColor = CatalogPanelBorderColor,
                BorderThickness = new Thickness(CatalogPanelBorderThickness),
                ContentMarginLeftOverride = CatalogPanelMarginLeft,
            },
            Margin = new Thickness(CatalogPanelMargin),
        };

        var scroll = new ScrollContainer { VerticalExpand = true, HorizontalExpand = true };
        var vboxHistory = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            SeparationOverride = CatalogBoxSeparation,
            HorizontalExpand = true,
            VerticalExpand = true,
        };

        foreach (var record in FullCatalog)
        {
            if (!_proto.TryIndex(record.Item1, out var protoHistoryRecord))
                continue;

            var label = new RichTextLabel
            {
                MaxWidth = RecordLabelWidth,
                Text = $"{protoHistoryRecord.Name}: {record.Item2}",
                HorizontalAlignment = HAlignment.Left,
                VerticalAlignment = VAlignment.Top,
                Modulate = protoHistoryRecord.Color,
            };
            vboxHistory.AddChild(label);
        }

        scroll.AddChild(vboxHistory);
        catalogPanel.AddChild(scroll);
        RecordHistory.AddChild(catalogPanel);
    }

    private void PopulateStatusSelector()
    {
        var protos = _proto.EnumeratePrototypes<CriminalStatusPrototype>().OrderBy(p => p.Name).ToList();

        var mainButton = new ShapeButton
        {
            SetWidth = StatusButtonWidth,
            SetHeight = StatusButtonHeight,
            Text = Loc.GetString("sec-hud-records-change-status"),
        };

        var popup = new Popup { Visible = false, VerticalExpand = true };
        var scroll = new ScrollContainer
            { MinSize = new Vector2(StatusButtonWidth, CriminalStatusesScrollHeight), VerticalExpand = true };
        var vbox = new BoxContainer { VerticalExpand = true, Orientation = BoxContainer.LayoutOrientation.Vertical };
        scroll.AddChild(vbox);
        popup.AddChild(scroll);

        foreach (var proto in protos)
        {
            var button = new ShapeButton { SetWidth = StatusButtonWidth, Text = proto.Name };
            button.Label.Modulate = proto.Color;

            if (_proto.TryIndex(proto.StatusIcon, out var statusIcon))
            {
                var textureRect = new TextureRect
                {
                    Texture = _sprite.Frame0(statusIcon.Icon),
                    ModulateSelfOverride = Color.White,
                    HorizontalAlignment = HAlignment.Left,
                    VerticalAlignment = VAlignment.Center,
                    TextureScale = new Vector2(StatusIconTextureScale),
                };
                button.AddChild(textureRect);
            }

            button.OnPressed += _ =>
            {
                _chosenStatus = proto;
                mainButton.Text = proto.Name;

                foreach (var child in mainButton.Children.OfType<TextureRect>().ToArray())
                {
                    mainButton.RemoveChild(child);
                }

                if (statusIcon != null)
                {
                    mainButton.AddChild(new TextureRect
                    {
                        Texture = _sprite.Frame0(statusIcon.Icon),
                        HorizontalAlignment = HAlignment.Left,
                        VerticalAlignment = VAlignment.Center,
                        TextureScale = new Vector2(StatusIconTextureScale),
                    });
                }

                popup.Visible = false;
            };

            vbox.AddChild(button);
        }

        ChangeStatusContainer.AddChild(mainButton);
        ChangeStatusContainer.AddChild(popup);

        mainButton.OnPressed += _ =>
        {
            popup.Visible = !popup.Visible;
            if (popup.Visible)
            {
                var pos = mainButton.Position + new Vector2(0, mainButton.Size.Y + PopupVerticalOffset);
                PopupContainer.SetPopupOrigin(popup, pos);
            }
        };
    }
}
