// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using System.Numerics;
using System.Text;
using Content.Client.Stylesheets;
using Content.Shared.SS220.Utility;
using Content.Shared.SS220.Calculator;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.Calculator.UI;

[GenerateTypedNameReferences]
public sealed partial class CalculatorMenu : BaseWindow
{
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    private StringBuffer _numberTextBuffer;

    private CalculatorBoundUserInterface? _owner;

    public CalculatorMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        Stylesheet = new CalculatorStyle().Create(IoCManager.Resolve<IStylesheetManager>().SheetSpace, _resourceCache);
    }

    public CalculatorMenu(CalculatorBoundUserInterface owner) : this()
    {
        _owner = owner;

        ButtonDigit0.OnPressed += _ => _owner.OnDigitPressed(0);
        ButtonDigit1.OnPressed += _ => _owner.OnDigitPressed(1);
        ButtonDigit2.OnPressed += _ => _owner.OnDigitPressed(2);
        ButtonDigit3.OnPressed += _ => _owner.OnDigitPressed(3);
        ButtonDigit4.OnPressed += _ => _owner.OnDigitPressed(4);
        ButtonDigit5.OnPressed += _ => _owner.OnDigitPressed(5);
        ButtonDigit6.OnPressed += _ => _owner.OnDigitPressed(6);
        ButtonDigit7.OnPressed += _ => _owner.OnDigitPressed(7);
        ButtonDigit8.OnPressed += _ => _owner.OnDigitPressed(8);
        ButtonDigit9.OnPressed += _ => _owner.OnDigitPressed(9);
        ButtonDot.OnPressed += _ => _owner.OnDotPressed();
        ButtonPlus.OnPressed += _ => _owner.OnAddPressed();
        ButtonMinus.OnPressed += _ => _owner.OnSubtractPressed();
        ButtonMultiply.OnPressed += _ => _owner.OnMultiplyPressed();
        ButtonDivide.OnPressed += _ => _owner.OnDividePressed();
        ButtonClear.OnPressed += _ => _owner.OnClearPressed();
        ButtonClearEntry.OnPressed += _ => _owner.OnClearEntryPressed();
        ButtonEquals.OnPressed += _ => _owner.OnEqualsPressed();
        ButtonClose.OnPressed += _ => Close();
    }

    public void SetNumber(decimal number, byte? fractionLength)
    {
        var builder = _numberTextBuffer.BeginFormat();
        WriteNumber(builder, number, fractionLength);
        _numberTextBuffer.EndFormat();
        NumberDisplayLabel.TextMemory = _numberTextBuffer;
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }

    private static void WriteNumber(StringBuilder builder, decimal number, byte? fractionLength)
    {
        var intPart = DecimalMath.CastToIntOrDefault(number);
        var decPart = DecimalMath.CastToIntOrDefault((Math.Abs(number) - Math.Abs(intPart)) * DecimalMath.GetPowerOfTen(number.Scale));

        if (intPart == 0 && decimal.IsNegative(number))
        {
            builder.Append('-');
        }
        builder.Append(intPart);
        if (!fractionLength.HasValue)
            return;
        builder.Append('.');
        if (fractionLength.Value == 0)
            return;
        var decPartLength = DecimalMath.GetDecimalLength(decPart);
        for (var i = 0; i < number.Scale - decPartLength; i++)
        {
            builder.Append('0');
        }
        if (decPart > 0)
            builder.Append(decPart);
        for (var i = 0; i < fractionLength.GetValueOrDefault(0) - number.Scale; i++)
        {
            builder.Append('0');
        }
    }
}
