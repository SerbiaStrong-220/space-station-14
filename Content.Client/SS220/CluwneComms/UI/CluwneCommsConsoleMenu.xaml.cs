// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using System.Globalization;
using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.SS220.CluwneComms.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CluwneCommsConsoleMenu : FancyWindow
    {
        [Dependency] private readonly IConfigurationManager _cfg = default!;
        [Dependency] private readonly IGameTiming _timing = default!;
        [Dependency] private readonly ILocalizationManager _loc = default!;

        public bool CanAnnounce;
        public bool CanAllert;
        public bool AlertLevelSelectable;
        public bool CountdownStarted;
        public string CurrentLevel = string.Empty;
        public TimeSpan? CountdownEnd;

        public event Action? OnEmergencyLevel;
        public event Action<string>? OnAlertLevel;
        public event Action<string>? OnAnnounce;
        public CluwneCommsConsoleMenu()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            // SS220 Text Edit Limits begin
            //MessageInput.Placeholder = new Rope.Leaf(_loc.GetString("comms-console-menu-announcement-placeholder"));

            //var maxAnnounceLength = _cfg.GetCVar(CCVars.ChatMaxAnnouncementLength);
            //MessageInput.OnTextChanged += (args) =>
            MessageInput.Edit.Placeholder = new Rope.Leaf(_loc.GetString("comms-console-menu-announcement-placeholder"));

            var maxAnnounceLength = _cfg.GetCVar(CCVars.ChatMaxAnnouncementLength);
            MessageInput.MaxLength = maxAnnounceLength;
            MessageInput.Edit.OnTextChanged += (args) =>
            // SS220 Text Edit Limits end
            {
                if (args.Control.TextLength > maxAnnounceLength)
                {
                    AnnounceButton.Disabled = true;
                    AnnounceButton.ToolTip = Loc.GetString("comms-console-message-too-long");
                }
                else
                {
                    AnnounceButton.Disabled = !CanAnnounce;
                    AnnounceButton.ToolTip = null;
                }
            };

            AnnounceButton.OnPressed += _ => OnAnnounce?.Invoke(Rope.Collapse(MessageInput.TextRope));
            AnnounceButton.Disabled = !CanAnnounce;

            AlertLevelButton.OnItemSelected += args =>
            {
                var metadata = AlertLevelButton.GetItemMetadata(args.Id);
                if (metadata != null && metadata is string cast)
                {
                    OnAlertLevel?.Invoke(cast);
                }
            };


            AlertLevelButton.Disabled = !AlertLevelSelectable;
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);
            UpdateCountdown();
        }

        public void UpdateCountdown()
        {
            /*
            if (!CountdownStarted)
            {
                CountdownLabel.SetMessage(string.Empty);
                return;
            }

            var diff = MathHelper.Max((CountdownEnd - _timing.CurTime) ?? TimeSpan.Zero, TimeSpan.Zero);

            var infoText = Loc.GetString($"comms-console-menu-time-remaining",
                ("time", diff.ToString(@"hh\:mm\:ss", CultureInfo.CurrentCulture)));
            CountdownLabel.SetMessage(infoText);
            */
        }
    }
}
