// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using System.Globalization;
using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Microsoft.CodeAnalysis;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.OptionButton;

namespace Content.Client.SS220.CluwneComms.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CluwneCommsConsoleMenu : FancyWindow
    {
        [Dependency] private readonly IConfigurationManager _cfg = default!;
        [Dependency] private readonly IGameTiming _timing = default!;
        [Dependency] private readonly ILocalizationManager _loc = default!;

        public bool CanAnnounce;
        public bool CanAlert;
        public bool AlertLevelSelectable;
        public string CurrentLevel = string.Empty;
        public TimeSpan? CountdownEnd;

        public event Action? OnEmergencyLevel;
        //public event Action<ItemSelectedEventArgs>? OnAlertLevel;
        public event Action<string>? OnAnnounce;
        public event Action<string, string, string>? OnAlert;
        public event Action? OnBoom;
        public CluwneCommsConsoleMenu()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
            #region Announce
            MessageInput.Edit.Placeholder = new Rope.Leaf(_loc.GetString("cluwne-comms-console-menu-announcement-placeholder"));

            var maxAnnounceLength = _cfg.GetCVar(CCVars.ChatMaxAnnouncementLength);
            MessageInput.MaxLength = maxAnnounceLength;
            MessageInput.Edit.OnTextChanged += (args) =>
            {
                if (args.Control.TextLength > maxAnnounceLength)
                {
                    AnnounceButton.Disabled = true;
                    AnnounceButton.ToolTip = Loc.GetString("comms-console-message-too-long");
                }
                else
                {
                    AnnounceButton.Disabled = !CanAnnounce;
                    AnnounceButton.ToolTip = null;
                }
            };

            AnnounceButton.OnPressed += _ => OnAnnounce?.Invoke(Rope.Collapse(MessageInput.TextRope));
            AnnounceButton.Disabled = !CanAnnounce;
            #endregion

            #region AlertText
            AlertInput.Edit.Placeholder = new Rope.Leaf(_loc.GetString("cluwne-comms-console-menu-alert-placeholder"));
            AlertInput.MaxLength = maxAnnounceLength;
            AlertInput.Edit.OnTextChanged += (args) =>
            {
                if (args.Control.TextLength > maxAnnounceLength)
                {
                    AlertLevelButton.Disabled = true;
                    AlertLevelButton.ToolTip = Loc.GetString("comms-console-message-too-long");
                }
                else
                {
                    AlertLevelButton.Disabled = !CanAlert;
                    AlertLevelButton.ToolTip = null;
                }
            };

            InstructionInput.Edit.Placeholder = new Rope.Leaf(_loc.GetString("cluwne-comms-console-menu-instruction-placeholder"));
            InstructionInput.MaxLength = maxAnnounceLength;
            MessageInput.Edit.OnTextChanged += (args) =>
            {
                if (args.Control.TextLength > maxAnnounceLength)
                {
                    AlertLevelButton.Disabled = true;
                    AlertLevelButton.ToolTip = Loc.GetString("comms-console-message-too-long");
                }
                else
                {
                    AlertLevelButton.Disabled = !CanAlert;
                    AlertLevelButton.ToolTip = null;
                }
            };

            #endregion

            #region Alert

            string code = "";//buffer cause idk
            AlertLevelButton.OnItemSelected += args =>
            {
                AlertLevelButton.SelectId(args.Id);

                var metadata = AlertLevelButton.GetItemMetadata(args.Id);
                if (metadata != null && metadata is string cast)
                {
                    code = cast;

                    AlertInput.TextRope = new Rope.Leaf(_loc.GetString("joke-alert-level-" + code + "-announcement"));
                    InstructionInput.TextRope = new Rope.Leaf(_loc.GetString("joke-alert-level-" + code + "-announcement"));
                }
            };

            AlertLevelButton.Disabled = !AlertLevelSelectable;

            InstructionInput.Edit.OnTextChanged += (args) =>
            // SS220 Text Edit Limits end
            {
                if (args.Control.TextLength > maxAnnounceLength)
                {
                    AlertButton.Disabled = true;
                    AlertButton.ToolTip = Loc.GetString("comms-console-message-too-long");
                }
                else
                {
                    AlertButton.Disabled = !CanAlert;
                    AlertButton.ToolTip = null;
                }
            };

            AlertButton.OnPressed += _ => OnAlert?.Invoke("code", Rope.Collapse(AlertInput.TextRope), Rope.Collapse(InstructionInput.TextRope));//make here button string
            AlertButton.Disabled = !CanAlert;

            BoomButton.OnPressed += _ => OnBoom?.Invoke();
        }
        #endregion
        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);
            UpdateCountdown();
        }

        public void UpdateAlertLevels(List<string>? alerts)
        {
            AlertLevelButton.Clear();

            if (alerts == null)
            {
                AlertLevelButton.AddItem("name");
                AlertLevelButton.SetItemMetadata(AlertLevelButton.ItemCount - 1, "currentAlert");
                return;
            }

            foreach (var alert in alerts)
            {
                var name = alert;
                if (_loc.TryGetString($"joke-alert-level-{alert}", out var locName))
                    name = locName;

                AlertLevelButton.AddItem(name);
                AlertLevelButton.SetItemMetadata(AlertLevelButton.ItemCount - 1, alert);
            }
        }

        public void UpdateCountdown()
        {
            /*
            if (!CountdownStarted)
            {
                CountdownLabel.SetMessage(string.Empty);
                return;
            }

            var diff = MathHelper.Max((CountdownEnd - _timing.CurTime) ?? TimeSpan.Zero, TimeSpan.Zero);

            var infoText = Loc.GetString($"comms-console-menu-time-remaining",
                ("time", diff.ToString(@"hh\:mm\:ss", CultureInfo.CurrentCulture)));
            CountdownLabel.SetMessage(infoText);
            */
        }
    }
}
