// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using System.Numerics;
using System.Text;
using Content.Client.Resources;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Client.Graphics;
using Robust.Shared.Timing;

namespace Content.Client.SS220.WristWatch.UI;

[GenerateTypedNameReferences]
public sealed partial class WristWatchMenu : BaseWindow
{
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    private readonly StringBuilder _stringBuilder = new();
    private readonly char[] _timeTextBuffer = new char[6];

    private WristWatchBoundUserInterface? _owner;
    private WristWatchStylePrototype? _style;

    // It wont compile without this
    public WristWatchMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public WristWatchMenu(WristWatchBoundUserInterface owner) : this()
    {
        _owner = owner;
    }

    public void SetStyle(WristWatchStylePrototype style)
    {
        _style = style;

        var bgBox = new StyleBoxTexture()
        {
            Texture = _resourceCache.GetTexture(style.PanelTexture),
        };
        bgBox.SetPatchMargin(StyleBox.Margin.All, 0);
        BackgroundPanel.PanelOverride = bgBox;

        Font? defaultFont = null;
        SetLabelStyle(HoursLabel, style.HoursLabel, ref defaultFont);
        SetLabelStyle(MinutesLabel, style.MinutesLabel, ref defaultFont);
        SetLabelStyle(FirstSeparatorLabel, style.FirstSeparator, ref defaultFont);
        SetLabelStyle(SecondsLabel, style.SecondsLabel, ref defaultFont);
        SetLabelStyle(SecondSeparatorLabel, style.SecondSeparator, ref defaultFont);
    }

    public void SetTime(TimeSpan time)
    {
        // Zero memory allocations code
        static void AppendTimeFragment(StringBuilder b, int value)
        {
            value = Math.Abs(value);
            if (value < 10)
                b.Append('0');
            b.Append(value);
        }
        _stringBuilder.Clear();
        AppendTimeFragment(_stringBuilder, time.Hours);
        AppendTimeFragment(_stringBuilder, time.Minutes);
        AppendTimeFragment(_stringBuilder, time.Seconds);
        _stringBuilder.CopyTo(0, _timeTextBuffer, 6);
        HoursLabel.TextMemory = _timeTextBuffer.AsMemory(0..2);
        MinutesLabel.TextMemory = _timeTextBuffer.AsMemory(2..4);
        SecondsLabel.TextMemory = _timeTextBuffer.AsMemory(4..6);
    }

    protected override Vector2 ArrangeOverride(Vector2 finalSize)
    {
        finalSize = base.ArrangeOverride(finalSize);
        if (_style == null)
        {
            return finalSize;
        }
        MinSize = _style.PanelSize;
        SetSize = _style.PanelSize;
        ArrangeLabel(HoursLabel, _style.HoursLabel);
        ArrangeLabel(MinutesLabel, _style.MinutesLabel);
        ArrangeLabel(FirstSeparatorLabel, _style.FirstSeparator);
        ArrangeLabel(SecondsLabel, _style.SecondsLabel);
        ArrangeLabel(SecondSeparatorLabel, _style.SecondSeparator);

        return finalSize;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        _owner?.RequestUpdate();
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }

    private void ArrangeLabel(Label label, WristWatchLabelStyle? optionalStyle)
    {
        if (optionalStyle is not { } style)
        {
            return;
        }
        label.Arrange(new UIBox2(style.Position, style.Position + style.Size));
    }

    private void SetLabelStyle(Label label, WristWatchLabelStyle? optionalStyle, ref Font? defaultFont)
    {
        if (optionalStyle is not { } style)
        {
            label.Visible = false;
            return;
        }
        label.Visible = true;
        label.FontColorOverride = style.Color;
        if (style.Font is { } fontStyle)
        {
            var font = _resourceCache.GetFont(fontStyle.Path, fontStyle.Size);
            defaultFont = font;
        }
        label.FontOverride = defaultFont;
    }
}
