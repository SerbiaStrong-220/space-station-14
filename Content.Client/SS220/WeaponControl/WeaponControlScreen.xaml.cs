using System.Numerics;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Physics.Components;

namespace Content.Client.SS220.WeaponControl;

[GenerateTypedNameReferences]
public sealed partial class WeaponControlScreen : BoxContainer
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    private SharedTransformSystem _xformSystem;

    private EntityUid? _consoleEntity; // Entity of controlling console
    private EntityUid? _shuttleEntity;

    public WeaponControlScreen()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _xformSystem = _entManager.System<SharedTransformSystem>();
    }

    public void SetShuttle(EntityUid? shuttle)
    {
        _shuttleEntity = shuttle;
    }

    public void SetConsole(EntityUid? console)
    {
        _consoleEntity = console;
        //NavRadar.SetConsole(console);
    }

    public void UpdateState(NavInterfaceState scc)
    {
        //NavRadar.UpdateState(scc);
    }

    public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
    {
        _shuttleEntity = coordinates?.EntityId;
        //NavRadar.SetMatrix(coordinates, angle);
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (!_entManager.TryGetComponent(_shuttleEntity, out TransformComponent? gridXform) ||
            !_entManager.TryGetComponent(_shuttleEntity, out PhysicsComponent? gridBody))
        {
            return;
        }
    }
}
