// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using System.Diagnostics.CodeAnalysis;
using JetBrains.Annotations;
using Content.Client.Guidebook.Controls;
using Content.Client.Guidebook.Richtext;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Shared.SS220.SupaKitchen;
using Content.Client.Message;
using Robust.Shared.Utility;
using Content.Shared.Chemistry.Reagent;

namespace Content.Client.SS220.SupaKitchen.UI.Controls;

/// <summary>
///     Control for embedding a reagent into a guidebook.
/// </summary>
[UsedImplicitly, GenerateTypedNameReferences]
public sealed partial class GuideCookingRecipeEmbed : BoxContainer, IDocumentTag, ISearchableControl
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private HashSet<string> _nameSearchCache;

    private readonly ISawmill _sawmill;

    public GuideCookingRecipeEmbed()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        MouseFilter = MouseFilterMode.Stop;
        _sawmill = Logger.GetSawmill("KitchenCookbook");

        _nameSearchCache = new();
    }

    public GuideCookingRecipeEmbed(CookingRecipePrototype recipe) : this()
    {
        GenerateControl(recipe);
    }

    // uhhh shit i'm not sure about the performance
    public bool CheckMatchesSearch(string query)
    {
        foreach (var match in _nameSearchCache)
        {
            if (match.Contains(query))
                return true;
        }

        return false;
    }

    public void SetHiddenState(bool state, string query)
    {
        this.Visible = CheckMatchesSearch(query) ? state : !state;
    }

    public bool TryParseTag(Dictionary<string, string> args, [NotNullWhen(true)] out Control? control)
    {
        control = null;
        if (!args.TryGetValue("Recipe", out var id))
        {
            _sawmill.Error("Recipe embed tag is missing reagent prototype argument");
            return false;
        }

        if (!_prototype.TryIndex<CookingRecipePrototype>(id, out var recipe))
        {
            _sawmill.Error($"Specified CookingRecipe prototype \"{id}\" is not a valid CookingRecipe prototype");
            return false;
        }

        GenerateControl(recipe);

        control = this;
        return true;
    }

    private void GenerateControl(CookingRecipePrototype recipe)
    {
        if (!_prototype.TryIndex<EntityPrototype>(recipe.Result, out var product))
            return;

        _nameSearchCache.Add(product.Name);
        ProductsLabelTitle.SetMarkup(product.Name);
        // RecipeName.Text = recipe.Name;

        // solid ingredients
        var ingredientsMsg = new FormattedMessage();
        var solidIngredientsCount = recipe.IngredientsSolids.Count;
        var i = 0;
        foreach (var (ingredientId, ingredientAmount) in recipe.IngredientsSolids)
        {
            if (!_prototype.TryIndex<EntityPrototype>(ingredientId, out var ingredientProto))
            {
                solidIngredientsCount--;
                continue;
            }

            var ingredientName = ingredientProto.Name;
            _nameSearchCache.Add(ingredientName);

            ingredientsMsg.AddMarkup(Loc.GetString("guidebook-cooking-recipes-ingredient-display",
                ("reagent", ingredientName), ("ratio", ingredientAmount)));

            i++;
            if (i < solidIngredientsCount)
                ingredientsMsg.PushNewline();
        }

        // reagents
        var reagentIngredientsCount = recipe.IngredientsReagents.Count;
        if (reagentIngredientsCount > 0)
            ingredientsMsg.PushNewline();
        var u = 0;
        foreach (var (ingredientId, ingredientAmount) in recipe.IngredientsReagents)
        {
            if (!_prototype.TryIndex<ReagentPrototype>(ingredientId, out var ingredientProto))
            {
                reagentIngredientsCount--;
                continue;
            }

            var ingredientName = ingredientProto.LocalizedName;
            _nameSearchCache.Add(ingredientName);

            ingredientsMsg.AddMarkup(Loc.GetString("guidebook-cooking-recipes-ingredient-display",
                ("reagent", ingredientName), ("ratio", ingredientAmount)));

            u++;
            if (u < reagentIngredientsCount)
                ingredientsMsg.PushNewline();
        }

        ingredientsMsg.Pop();
        IngredientsLabel.SetMessage(ingredientsMsg);

        // output
        ProductsLabel.SetMarkup(Loc.GetString("guidebook-cooking-recipes-ingredient-display",
            ("reagent", product.Name), ("ratio", 1)));

        if (!_prototype.TryIndex<CookingInstrumentTypePrototype>(recipe.InstrumentType, out var instrumentProto))
            return;

        var instrumentMsg = new FormattedMessage();
        instrumentMsg.AddMarkup(instrumentProto.Name);
        instrumentMsg.PushNewline();
        instrumentMsg.AddMarkup(Loc.GetString("guidebook-cooking-recipes-timer-display", ("time", recipe.CookTime)));
        instrumentMsg.Pop();
        InstrumentName.SetMessage(instrumentMsg);

        if (instrumentProto.IconPath is not null)
            InstrumentIcon.TexturePath = instrumentProto.IconPath;
    }
}
