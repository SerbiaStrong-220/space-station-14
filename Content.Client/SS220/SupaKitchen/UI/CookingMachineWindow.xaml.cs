using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.SupaKitchen.UI;

[GenerateTypedNameReferences]
public sealed partial class CookingMachineWindow : DefaultWindow
{
    [Dependency] private readonly EntityManager _entMan = default!;

    public sealed class MicrowaveCookTimeButton : Button
    {
        public uint CookTime;
    }

    public event Action<BaseButton.ButtonEventArgs, int>? OnCookTimeSelected;

    private ButtonGroup CookTimeButtonGroup { get; }

    public CookingMachineWindow(CookingMachineBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        CookTimeButtonGroup = new ButtonGroup();

        for (var i = 0; i <= 30; i += 5)
        {
            var newButton = new MicrowaveCookTimeButton
            {
                Text = i == 0 ? Loc.GetString("cooking-machine-menu-instant-button") : i.ToString(),
                CookTime = (uint) i,
                TextAlign = Label.AlignMode.Center,
                ToggleMode = true,
                Group = CookTimeButtonGroup,
            };
            CookTimeButtonVbox.AddChild(newButton);
            newButton.OnToggled += args =>
            {
                OnCookTimeSelected?.Invoke(args, newButton.GetPositionInParent());
            };
        }

        if (_entMan.TryGetComponent<MetaDataComponent>(owner.Owner, out var metaData))
            Title = metaData.EntityName;
    }

    public void ToggleBusyDisableOverlayPanel(bool shouldDisable)
    {
        DisableCookingPanelOverlay.Visible = shouldDisable;
    }
}

