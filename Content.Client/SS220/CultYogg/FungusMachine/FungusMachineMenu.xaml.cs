// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using System.Numerics;
using Content.Shared.SS220.CultYogg.FungusMachine;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Content.Shared.IdentityManagement;
using Content.Client.UserInterface.Controls;
using Content.Client.VendingMachines.UI;
using Robust.Client.UserInterface;
using Content.Shared.SS220.CultYogg.MiGo;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Utility;
using Content.Client.Botany.Components;

namespace Content.Client.SS220.CultYogg.FungusMachine
{
    [GenerateTypedNameReferences]
    public sealed partial class FungusMachineMenu : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IEntityManager _entityManager = default!;

        private readonly Dictionary<EntProtoId, EntityUid> _dummies = [];
        private readonly Dictionary<EntProtoId, (ListContainerButton Button, VendingMachineItem Item)> _listItems = new();

        public event Action<GUIBoundKeyEventArgs, ListData>? OnItemSelected;
        public event Action<string>? OnSearchChanged;

        public FungusMachineMenu()
        {
            MinSize = new Vector2(x: 200, y: 150);
            SetSize = new Vector2(x: 250, y: 150);
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            SearchBar.OnTextChanged += _ =>
            {
                OnSearchChanged?.Invoke(SearchBar.Text);
            };

            /*FungusContents.OnItemSelected += args =>
            {
                OnItemSelected?.Invoke(args);
            };*/

            FungusContents.SearchBar = SearchBar;
            FungusContents.DataFilterCondition += DataFilterCondition;
            FungusContents.GenerateItem += GenerateButton;
            FungusContents.ItemKeyBindDown += HandleItemKeyBindDown;
        }

        private void HandleItemKeyBindDown(GUIBoundKeyEventArgs args, ListData data)
        {
            OnItemSelected?.Invoke(args, data);
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (!disposing)
                return;

            foreach (var entity in _dummies.Values)
            {
                _entityManager.QueueDeleteEntity(entity);
            }
            _dummies.Clear();
        }

        private bool DataFilterCondition(string filter, ListData data)
        {
            if (data is not FungusItemsListData { ItemText: var text })
                return false;

            if (string.IsNullOrEmpty(filter))
                return true;

            return text.Contains(filter, StringComparison.CurrentCultureIgnoreCase);
        }

        private void GenerateButton(ListData data, ListContainerButton button)
        {
            if (data is not FungusItemsListData { ItemProtoID: var protoID, ItemText: var text })
                return;

            var item = new VendingMachineItem(protoID, text);
            _listItems[protoID] = (button, item);
            button.AddChild(item);
            button.AddStyleClass("ButtonSquare");

            var tooltipLocString = protoID.ToString();

            if (tooltipLocString.StartsWith("Cult"))
            {
                tooltipLocString = tooltipLocString.Substring(4);
            }

            if (tooltipLocString.EndsWith("Seeds"))
            {
                tooltipLocString = tooltipLocString.Substring(0, tooltipLocString.Length - 5);
            }
            else if (tooltipLocString.EndsWith("Seed"))
            {
                tooltipLocString = tooltipLocString.Substring(0, tooltipLocString.Length - 4);
            }

            var tooltip = new Tooltip();
            tooltip.SetMessage(FormattedMessage.FromUnformatted(Loc.GetString($"cult-yogg-{tooltipLocString}-plant-tooltip")));
            button.TooltipSupplier = _ => tooltip;
        }

        public void Populate(List<FungusMachineInventoryEntry> inventory)
        {
            _listItems.Clear();

            var longestEntry = string.Empty;
            var listData = new List<FungusItemsListData>();

            for (var i = 0; i < inventory.Count; i++)
            {
                var entry = inventory[i];

                if (!_prototypeManager.TryIndex(entry.Id, out var prototype))
                    continue;

                if (!_dummies.TryGetValue(entry.Id, out var dummy))
                {
                    dummy = _entityManager.Spawn(entry.Id);
                    _dummies.Add(entry.Id, dummy);
                }

                var itemName = Identity.Name(dummy, _entityManager);
                var itemText = $"{itemName}";

                if (itemText.Length > longestEntry.Length)
                    longestEntry = itemText;

                listData.Add(new FungusItemsListData(prototype.ID, i)
                {
                    ItemText = itemText,
                });
            }

            FungusContents.PopulateList(listData);
            SetSizeAfterUpdate(longestEntry.Length, inventory.Count);
        }

        private void SetSizeAfterUpdate(int longestEntryLength, int contentCount)
        {
            SetSize = new Vector2(Math.Clamp((longestEntryLength + 2) * 12, 250, 400),
                Math.Clamp(contentCount * 50, 150, 350));
        }
    }
    public record FungusItemsListData(EntProtoId ItemProtoID, int ItemIndex) : ListData
    {
        public string ItemText = string.Empty;
    }
}
