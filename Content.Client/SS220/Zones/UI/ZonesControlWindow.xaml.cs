// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.SS220.Zones.Systems;
using Content.Client.SS220.Zones.UI.CustomControls;
using Content.Shared.SS220.Zones;
using Content.Shared.SS220.Zones.Components;
using Content.Shared.SS220.Zones.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.Linq;
using System.Numerics;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZonesControlWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly ZonesSystem _zones;

    private Dictionary<EntityUid, ZoneContainerEntry> _zoneContainerEntries = new();

    public ZoneEntry? SelectedZoneEntry
    {
        get => _selectedZoneEntry;
        set => SelectEntry(value);
    }

    private ZoneEntry? _selectedZoneEntry;
    private Vector2 _baseMinSize;
    private ZoneOptions _curOption;
    private BoxContainer? _paramsAdditionalButtonsBox;
    private ZoneWarningWindow? _openedWarningWindow;

    public ZonesControlWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _baseMinSize = MinSize;

        _zones = _entityManager.System<ZonesSystem>();

        RefreshButton.OnPressed += _ => RefreshEntries();
        OverlayButton.OnToggled += e => _zones.SetOverlay(e.Pressed);
        SearchLineEdit.OnTextChanged += ApplySearchFilter;

        CreateNewZoneButton.OnToggled += e =>
        {
            if (e.Pressed)
                SetOptions(ZoneOptions.Creating);
            else
                SetOptions(ZoneOptions.None);
        };

        OptionsPanel.PanelOverride = new StyleBoxFlat()
        {
            BorderColor = new Color(96, 96, 96),
            BorderThickness = new Thickness(2)
        };

        OnOpen += RefreshEntries;
        OnClose += () => SetOptions(ZoneOptions.None);
        RefreshEntries();
    }

    public void RefreshEntries()
    {

        var toDelete = _zoneContainerEntries.ToDictionary();
        var toAdd = new Dictionary<EntityUid, ZoneContainerEntry>();

        var query = _entityManager.AllEntityQueryEnumerator<ZonesContainerComponent>();
        while (query.MoveNext(out var uid, out var zoneData))
        {
            if (zoneData.Zones.Count <= 0)
                continue;

            if (!toDelete.Remove(uid))
                toAdd.Add(uid, GetZoneContainerEntry((uid, zoneData)));
        }

        foreach (var (key, value) in toDelete)
        {
            if (SelectedZoneEntry != null &&
                value.ZoneEntries.ContainsValue(SelectedZoneEntry))
                DeselectEntry();

            ZonesContainersContainer.RemoveChild(value);
            _zoneContainerEntries.Remove(key);
        }

        foreach (var (key, value) in toAdd)
        {
            ZonesContainersContainer.AddChild(value);
            _zoneContainerEntries.Add(key, value);
        }

        SortEntries();
        foreach (var entry in _zoneContainerEntries.Values)
            entry.Refresh();
    }

    public void SortEntries()
    {
        var sorted = _zoneContainerEntries.OrderBy(e => e.Key).ToDictionary();
        ZonesContainersContainer.RemoveAllChildren();
        foreach (var value in sorted.Values)
            ZonesContainersContainer.AddChild(value);

        _zoneContainerEntries = sorted;
    }

    private ZoneContainerEntry GetZoneContainerEntry(Entity<ZonesContainerComponent> entity)
    {
        var entry = new ZoneContainerEntry(entity);
        entry.ZoneEntryToggled += OnZoneEntryToggled;
        return entry;
    }

    private void OnZoneEntryToggled(ZoneEntry entry)
    {
        if (SelectedZoneEntry == entry)
            DeselectEntry();
        else
            SelectEntry(entry);
    }

    private void SelectEntry(ZoneEntry? entry)
    {
        if (entry == null)
            DeselectEntry();
        else
        {
            if (SelectedZoneEntry is { } selected && selected != entry)
                selected.Pressed = false;

            ZoneParams?.SetZoneEntity(entry.ZoneEntity);
            _selectedZoneEntry = entry;
            SetOptions(ZoneOptions.Editing);
        }
    }

    private void DeselectEntry()
    {
        if (SelectedZoneEntry is { } selected)
            selected.Pressed = false;

        ZoneParams.SetZoneEntity(null);
        _selectedZoneEntry = null;
        SetOptions(ZoneOptions.None);
    }

    private void ApplySearchFilter(LineEdit.LineEditEventArgs args)
    {
        foreach (var entry in _zoneContainerEntries.Values)
            entry.ApplyFilter(args.Text);
    }

    private void SetOptions(ZoneOptions option)
    {
        switch (option)
        {
            case ZoneOptions.None:
                if (SelectedZoneEntry != null)
                    DeselectEntry();

                CreateNewZoneButton.Pressed = false;
                ZoneParams.SetOverlay(false);
                break;

            case ZoneOptions.Editing:
                if (ZoneParams?.ZoneEntity is not { } zone)
                    return;

                ZoneParams.SetZoneEntity(zone);
                ZoneParams.SetOverlay(true);
                AddAditionalButtons(GetEditingOptionsButtons());
                CreateNewZoneButton.Pressed = false;
                break;

            case ZoneOptions.Creating:
                if (SelectedZoneEntry != null)
                    DeselectEntry();

                ZoneParams.SetZoneEntity(null);
                ZoneParams.SetOverlay(true);
                AddAditionalButtons(GetCreatingOptionsButtons());
                CreateNewZoneButton.Pressed = true;
                break;
        }
        UpdateVisible();

        _curOption = option;

        void UpdateVisible()
        {
            var visible = OptionsPanel.Visible;
            switch (option)
            {
                case ZoneOptions.Creating:
                case ZoneOptions.Editing:
                    if (!visible)
                        MinHeight += ZoneParams.MinHeight;

                    OptionsPanel.Visible = true;
                    break;

                default:
                    if (visible)
                        MinHeight = _baseMinSize.Y;

                    OptionsPanel.Visible = false;
                    break;
            }
        }

        void AddAditionalButtons(BoxContainer box)
        {
            if (_paramsAdditionalButtonsBox == box)
                return;

            if (_paramsAdditionalButtonsBox != null)
                ZoneParams.MainBox.RemoveChild(_paramsAdditionalButtonsBox);

            ZoneParams.MainBox.AddChild(box);
            _paramsAdditionalButtonsBox = box;
        }
    }

    private BoxContainer GetCreatingOptionsButtons()
    {
        var box = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true,
        };

        var creatingButton = new Button()
        {
            Text = Loc.GetString("zones-control-create-button"),
            HorizontalExpand = true,
        };
        creatingButton.OnPressed += _ =>
        {
            var @params = ZoneParams.GetParams();
            _zones.ExecuteCreateZone(@params);
            SetOptions(ZoneOptions.None);
        };
        box.AddChild(creatingButton);

        var cancelButton = new Button()
        {
            Text = Loc.GetString("zones-control-cancel-button"),
            HorizontalExpand = true
        };
        cancelButton.OnPressed += _ => SetOptions(ZoneOptions.None);
        box.AddChild(cancelButton);

        return box;
    }

    private BoxContainer GetEditingOptionsButtons()
    {
        var box = new BoxContainer()
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true,
        };

        var applyButton = new Button()
        {
            Text = Loc.GetString("zones-control-apply-button"),
            HorizontalExpand = true,
        };

        applyButton.OnPressed += _ =>
        {
            if (SelectedZoneEntry?.ZoneEntity is { } zone)
            {
                var newParams = ZoneParams.GetParams();
                if (SharedZonesSystem.NeedRecreate(zone.Comp.ZoneParams, newParams))
                    ThrowRecreateWarning(zone, newParams, applyButton.GlobalPosition);
                else
                    ExecuteChange(zone, newParams);
            }
        };
        box.AddChild(applyButton);

        var cancelButton = new Button()
        {
            Text = Loc.GetString("zones-control-cancel-button"),
            HorizontalExpand = true
        };
        cancelButton.OnPressed += _ => SetOptions(ZoneOptions.None);
        box.AddChild(cancelButton);

        return box;

        void ThrowRecreateWarning(Entity<ZoneComponent> zone, ZoneParams newParams, Vector2? position = null)
        {
            if (_openedWarningWindow != null)
                return;

            _openedWarningWindow = new ZoneWarningWindow();
            var text = Loc.GetString("zones-control-recreate-warning-text");
            _openedWarningWindow.WarningLabel.SetMessage(text);

            if (position != null)
            {
                _openedWarningWindow.Open(position.Value);
            }
            else
                _openedWarningWindow.OpenCentered();

            _openedWarningWindow.ConfirmButton.OnPressed += _ =>
            {
                ExecuteChange(zone, newParams);
                _openedWarningWindow.Close();
            };

            _openedWarningWindow.CancelButton.OnPressed += _ =>
            {
                _openedWarningWindow.Close();
            };

            _openedWarningWindow.OnClose += () => _openedWarningWindow = null;
        }

        void ExecuteChange(Entity<ZoneComponent> zone, ZoneParams newParams)
        {
            _zones.ExecuteChangeZone(zone, newParams);
            SetOptions(ZoneOptions.None);
        }
    }

    private enum ZoneOptions
    {
        None,
        Editing,
        Creating
    }
}
