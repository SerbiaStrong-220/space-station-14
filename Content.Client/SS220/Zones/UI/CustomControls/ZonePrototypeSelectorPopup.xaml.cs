// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.SS220.Zones.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.Zones.UI.CustomControls;

[GenerateTypedNameReferences]
public sealed partial class ZonePrototypeSelectorPopup : Popup
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly ZonesSystem _zonesSystem;

    public Action<EntityPrototype>? OnPrototypeSelected;

    private List<EntityPrototype> _prototypes = new();
    private string _searhString = string.Empty;

    public ZonePrototypeSelectorPopup()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _zonesSystem = _entityManager.System<ZonesSystem>();
        SearchBar.OnTextChanged += args =>
        {
            _searhString = args.Text;
            UpdatePrototypesContainer();
        };

        UserInterfaceManager.ModalRoot.AddChild(this);
    }

    public void Refresh(bool clearSearsh = true)
    {
        UpdatePrototypesList();
        UpdatePrototypesContainer();

        if (clearSearsh)
        {
            _searhString = string.Empty;
            SearchBar.Text = _searhString;
        }
    }

    public void UpdatePrototypesList()
    {
        _prototypes.Clear();
        var prototypes = _zonesSystem.EnumerateZonePrototypes();
        foreach (var proto in prototypes)
        {
            if (proto.Abstract)
                continue;

            _prototypes.Add(proto);
        }

        SortPrototypes();
    }

    public void UpdatePrototypesContainer()
    {
        PrototypesContainer.RemoveAllChildren();
        foreach (var proto in _prototypes)
        {
            if (!PassSearch(proto))
                continue;

            var button = GetPrototypeButton(proto);
            PrototypesContainer.AddChild(button);
        }

        bool PassSearch(EntityPrototype proto)
        {
            if (string.IsNullOrEmpty(_searhString))
                return true;

            if (proto.ID.Contains(_searhString))
                return true;

            if (proto.Name.Contains(_searhString))
                return true;

            if (proto.EditorSuffix is { } suffix &&
                suffix.Contains(_searhString))
                return true;

            return false;
        }
    }

    private void SortPrototypes()
    {
        _prototypes.Sort((a, b) =>
        {
            var idComparation = string.Compare(a.ID, b.ID, StringComparison.Ordinal);
            if (idComparation != 0)
                return idComparation;

            var nameComparation = string.Compare(a.Name, b.Name, StringComparison.Ordinal);
            if (nameComparation != 0)
                return nameComparation;

            return string.Compare(a.EditorSuffix, b.EditorSuffix, StringComparison.Ordinal);
        });
    }

    private Button GetPrototypeButton(EntityPrototype prototype)
    {
        var name = !string.IsNullOrEmpty(prototype.EditorSuffix)
            ? $"[{prototype.EditorSuffix}] {prototype.Name}"
            : prototype.Name;

        var tooltipDescription = !string.IsNullOrEmpty(prototype.Description)
            ? $"\n\n{prototype.Description}"
            : string.Empty;

        var button = new Button()
        {
            HorizontalExpand = true,
            Text = name,
            Margin = new Thickness(0, 0, 0, 2),
            ToolTip = $"{name}\nid: {prototype.ID}{tooltipDescription}"
        };

        button.OnPressed += _ => OnPrototypeSelected?.Invoke(prototype);
        return button;
    }
}
