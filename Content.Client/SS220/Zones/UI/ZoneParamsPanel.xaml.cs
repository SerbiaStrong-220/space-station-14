// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.SS220.BoxLayout;
using Content.Client.SS220.Overlays;
using Content.Client.SS220.Zones.Systems;
using Content.Client.SS220.Zones.UI.CustomControls;
using Content.Client.Stylesheets;
using Content.Shared.Prototypes;
using Content.Shared.SS220.Maths;
using Content.Shared.SS220.Zones;
using Content.Shared.SS220.Zones.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Linq;
using static Content.Shared.SS220.Zones.ZoneParams;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZoneParamsPanel : PanelContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IBoxLayoutManager _boxLayoutManager = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private readonly ZonesSystem _zones = default!;

    public Action? OnRefreshed;

    public Entity<ZoneComponent>? ZoneEntity
    {
        get => _zoneEntity;
        set => SetZoneEntity(value);
    }

    private Entity<ZoneComponent>? _zoneEntity;

    public ZoneParams CurrentParams
    {
        get => _curParams;
        set
        {
            _curParams = value;
            CancelLayout();
            Refresh();
        }
    }
    private ZoneParams _curParams = default!;

    public ZoneParams OriginalParams => _originalParams;
    private ZoneParams _originalParams = default!;

    private BoxLayoutMode _layoutMode = BoxLayoutMode.Adding;

    private ZoneParamsBoxesOverlayProvider _overlayProvider;

    private ZonePrototypeSelectorPopup _prototypeSelectorPopup = new();
    private ZoneColorSelectorPopup _colorSelectorPopup = new();

    public ZoneParamsPanel() : this(null) { }

    public ZoneParamsPanel(Entity<ZoneComponent>? entity)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        var overlay = BoxesOverlay.GetOverlay();
        if (overlay.TryGetProvider<ZoneParamsBoxesOverlayProvider>(out var provider))
            _overlayProvider = provider;
        else
        {
            _overlayProvider = new ZoneParamsBoxesOverlayProvider();
            _overlayProvider.Panel = this;
            overlay.AddProvider(_overlayProvider);
        }

        _zones = _entityManager.System<ZonesSystem>();

        SizeOptionsBackground.PanelOverride = new StyleBoxFlat()
        {
            BackgroundColor = new Color(32, 32, 32),
            BorderColor = new Color(128, 128, 128),
            BorderThickness = new Thickness(2)
        };

        foreach (var value in Enum.GetValues<CutSpaceOptions>())
            CutSpaceOptionSelector.AddItem(Loc.GetString($"zone-cut-space-option-{value}"), (int)value);

        PrototypeSelectorButton.AddStyleClass(StyleNano.StyleClassChatFilterOptionButton);
        ColorSelectorButton.AddStyleClass(StyleNano.StyleClassChatFilterOptionButton);

        InitInteractions();
        InitTooltips();

        SetZoneEntity(entity);
    }

    private void InitInteractions()
    {
        AddBoxButton.OnToggled += e =>
        {
            if (e.Pressed)
                StartLayout(BoxLayoutMode.Adding);
            else
                CancelLayout();
        };
        CutBoxButton.OnToggled += e =>
        {
            if (e.Pressed)
                StartLayout(BoxLayoutMode.Cutting);
            else
                CancelLayout();
        };
        ShowChangesButton.OnToggled += e => SetOverlay(e.Pressed);

        ContainerNetIDLineEdit.OnFocusExit += args => SetContainer(args.Text);
        ContainerNetIDLineEdit.OnTextEntered += args => SetContainer(args.Text);

        NameLineEdit.OnFocusExit += args => SetName(args.Text);
        NameLineEdit.OnTextEntered += args => SetName(args.Text);

        PrototypeIDLineEdit.OnFocusExit += args => SetProtoID(args.Text);
        PrototypeIDLineEdit.OnTextEntered += args => SetProtoID(args.Text);

        HexColorLineEdit.OnFocusExit += args => SetColor(args.Text);
        HexColorLineEdit.OnTextEntered += args => SetColor(args.Text);

        AttachToGridCheckbox.OnPressed += _ => SetAttachToGrid(AttachToGridCheckbox.Pressed);

        PrototypeSelectorButton.OnPressed += _ =>
        {
            _prototypeSelectorPopup.Refresh();

            var globalPos = ColorSelectorButton.GlobalPosition;
            var box = UIBox2.FromDimensions(globalPos, _prototypeSelectorPopup.MinSize);
            _prototypeSelectorPopup.Open(box);
        };

        _prototypeSelectorPopup.OnPrototypeSelected += proto => SetProtoID(proto.ID);
        _prototypeSelectorPopup.OnVisibilityChanged += args => PrototypeSelectorButton.Pressed = args.Visible;

        ColorSelectorButton.OnPressed += _ =>
        {
            _colorSelectorPopup.SetColor(CurrentParams.Color);

            var globalPos = ColorSelectorButton.GlobalPosition;
            var box = UIBox2.FromDimensions(globalPos, _colorSelectorPopup.MinSize);
            _colorSelectorPopup.Open(box);
        };

        _colorSelectorPopup.OnColorSelected += SetColor;
        _colorSelectorPopup.OnVisibilityChanged += args => ColorSelectorButton.Pressed = args.Visible;

        CutSpaceOptionSelector.OnItemSelected += args => SetCutSpaceOption((CutSpaceOptions)args.Id);
    }

    private void InitTooltips()
    {
        NameLabel.ToolTip = Loc.GetString("zone-params-panel-name-tooltip");
        PrototypeIDLabel.ToolTip = Loc.GetString("zone-params-panel-prototype-id-tooltip");
        HexColorLabel.ToolTip = Loc.GetString("zone-params-panel-hex-color-tooltip");
        ContainerNetIDLabel.ToolTip = Loc.GetString("zone-params-panel-container-net-id-tooltip");
        AttachToGridCheckbox.ToolTip = Loc.GetString("zone-params-panel-attach-to-grid-tooltip");
        CutSpaceOptionLabel.ToolTip = Loc.GetString("zone-params-panel-cut-space-option-tooltip");
    }

    protected override void ExitedTree()
    {
        _colorSelectorPopup.Close();
        RemoveLayoutReact();
        SetOverlay(false);
        base.ExitedTree();
    }

    public void Refresh()
    {
        _prototypeSelectorPopup.Close();
        _colorSelectorPopup.Close();

        NameLineEdit.Text = CurrentParams.Name;
        PrototypeIDLineEdit.Text = CurrentParams.ProtoID;
        HexColorLineEdit.Text = CurrentParams.Color.ToHex();
        ContainerNetIDLineEdit.Text = (CurrentParams.Container is { } container && container.IsValid()) ? container.ToString() : string.Empty;
        AttachToGridCheckbox.Pressed = CurrentParams.AttachToGrid;
        CutSpaceOptionSelector.SelectId((int)CurrentParams.CutSpaceOption);

        Box2ListContainer.RemoveAllChildren();
        for (var i = 0; i < CurrentParams.OriginalRegion.Count; i++)
        {
            var box = CurrentParams.OriginalRegion[i];
            var entry = new ZoneBoxEntry(box);
            var index = i;
            entry.OnBoxChanged += newBox =>
            {
                var newSize = CurrentParams.OriginalRegion.ToList();
                newSize[index] = newBox;
                CurrentParams.SetOriginalSize(newSize);
            };
            Box2ListContainer.AddChild(entry);
        }

        _overlayProvider.Refresh();
        OnRefreshed?.Invoke();
    }

    public void SetZoneEntity(Entity<ZoneComponent>? entity)
    {
        _zoneEntity = entity;
        _originalParams = entity?.Comp.ZoneParams ?? new ZoneParams();
        if (string.IsNullOrEmpty(_originalParams.Name))
            _originalParams.Name = $"Zone {_zones.GetZonesCount() + 1}";

        CurrentParams = _originalParams.GetCopy();
    }

    private void StartLayout(BoxLayoutMode mode)
    {
        if (_boxLayoutManager.Active)
            return;

        _layoutMode = mode;

        switch (mode)
        {
            case BoxLayoutMode.Adding:
                _boxLayoutManager.StartNew();
                _boxLayoutManager.AttachToGrid = CurrentParams.AttachToGrid;
                break;

            case BoxLayoutMode.Cutting:
                _boxLayoutManager.StartNew();
                _boxLayoutManager.AttachToGrid = CurrentParams.AttachToGrid;
                _boxLayoutManager.SetColor(Color.Red);
                break;
        }

        AddLayotReact();
        _boxLayoutManager.SetOverlay(true);
    }

    private void CancelLayout()
    {
        if (!_boxLayoutManager.Active)
            return;

        _boxLayoutManager.Cancel();
    }

    private void AddLayotReact()
    {
        _boxLayoutManager.Ended += OnLayoutEnded;
        _boxLayoutManager.Cancelled += OnLayoutCancelled;
        _boxLayoutManager.SetOverlay(true);
    }

    private void RemoveLayoutReact()
    {
        _boxLayoutManager.Ended -= OnLayoutEnded;
        _boxLayoutManager.Cancelled -= OnLayoutCancelled;
        _boxLayoutManager.SetOverlay(false);

        AddBoxButton.Pressed = false;
        CutBoxButton.Pressed = false;
    }

    private void OnLayoutEnded(BoxLayoutManager.BoxParams @params)
    {
        var newParams = CurrentParams.GetCopy();
        if (!CurrentParams.Container.IsValid())
            newParams.Container = @params.Parent;
        else if (@params.Parent != CurrentParams.Container)
        {
            CancelLayout();
            return;
        }

        var newSize = newParams.OriginalRegion.ToList();
        switch (_layoutMode)
        {
            case BoxLayoutMode.Adding:
                newSize.Add(@params.Box);
                break;

            case BoxLayoutMode.Cutting:
                var cutter = @params.Box;
                if (CurrentParams.AttachToGrid)
                    _zones.AttachToGrid(newParams.Container, ref cutter);

                newSize = MathHelperExtensions.SubstructBox(newSize, cutter).ToList();
                break;
        }

        newSize = [.. newSize.Select(b =>
        {
            var left = MathF.Round(b.Left, 2);
            var bottom = MathF.Round(b.Bottom, 2);
            var right = MathF.Round(b.Right, 2);
            var top = MathF.Round(b.Top, 2);
            return new Box2(left, bottom, right, top);
        })];

        newParams.SetOriginalSize(newSize);
        newParams.RecalculateRegions();
        CurrentParams = newParams;
    }

    private void OnLayoutCancelled()
    {
        RemoveLayoutReact();
        _boxLayoutManager.SetOverlay(false);
    }

    public ZoneParams GetParams()
    {
        return CurrentParams;
    }

    public void SetOverlay(bool active)
    {
        ShowChangesButton.Pressed = active;
        _overlayProvider.Active = active;
    }

    #region params sets
    private void SetContainer(string container)
    {
        if (!EntityUid.TryParse(container, out var uid))
            return;

        SetContainer(uid);
    }

    private void SetContainer(EntityUid container)
    {
        CurrentParams.Container = container;
        Refresh();
    }

    private void SetName(string name)
    {
        CurrentParams.Name = name;
        Refresh();
    }

    private void SetProtoID(EntProtoId<ZoneComponent> protoId)
    {
        if (!_prototype.TryIndex<EntityPrototype>(protoId, out var proto) ||
            !proto.HasComponent<ZoneComponent>())
            return;

        CurrentParams.ProtoID = protoId;
        Refresh();
    }

    private void SetColor(string hexColor)
    {
        if (!Color.TryParse(hexColor, out var color))
            return;

        SetColor(color);
    }

    private void SetColor(Color color)
    {
        CurrentParams.Color = color;
        Refresh();
    }

    private void SetAttachToGrid(bool attachToGrid)
    {
        CurrentParams.AttachToGrid = attachToGrid;
        Refresh();
    }

    private void SetCutSpaceOption(CutSpaceOptions option)
    {
        CurrentParams.CutSpaceOption = option;
        Refresh();
    }
    #endregion

    private enum BoxLayoutMode
    {
        Adding,
        Cutting
    }

    private sealed class ZoneParamsBoxesOverlayProvider() : BoxesOverlay.BoxesOverlayProvider()
    {
        [Dependency] private readonly IEntityManager _entityManager = default!;

        public ZoneParamsPanel? Panel;
        private (EntityUid Parent, List<Box2> Boxes)? _addedBoxes;
        private (EntityUid Parent, List<Box2> Boxes)? _deletedBoxes;

        private const float ColorAlpha = 0.5f;

        public void Refresh()
        {
            if (Panel == null)
            {
                _addedBoxes = null;
                _deletedBoxes = null;
                return;
            }

            _addedBoxes = GetChanges(Panel.OriginalParams, Panel.CurrentParams);
            _deletedBoxes = GetChanges(Panel.CurrentParams, Panel.OriginalParams);
        }

        public override List<BoxesOverlay.BoxOverlayData> GetBoxesDatas()
        {
            var result = new List<BoxesOverlay.BoxOverlayData>();

            if (_addedBoxes is { } added &&
                added.Boxes.Count > 0 &&
                added.Parent.IsValid())
            {
                foreach (var box in added.Boxes)
                    result.Add(new BoxesOverlay.BoxOverlayData(added.Parent, box, Color.Green.WithAlpha(ColorAlpha)));
            }

            if (_deletedBoxes is { } deleted &&
                deleted.Boxes.Count > 0 &&
                deleted.Parent.IsValid())
            {
                foreach (var box in deleted.Boxes)
                    result.Add(new BoxesOverlay.BoxOverlayData(deleted.Parent, box, Color.Red.WithAlpha(ColorAlpha)));
            }

            return result;
        }

        private (EntityUid Parent, List<Box2> Boxes) GetChanges(ZoneParams left, ZoneParams right)
        {
            var leftParent = left.Container;
            var rightParent = right.Container;

            var result = right.OriginalRegion.ToList();
            if (leftParent == rightParent)
                result = [.. MathHelperExtensions.SubstructBox(result, left.OriginalRegion)];

            return (rightParent, result);
        }
    }
}
