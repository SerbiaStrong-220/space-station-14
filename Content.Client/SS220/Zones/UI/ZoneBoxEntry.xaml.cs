// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.Zones.UI;

[GenerateTypedNameReferences]
public sealed partial class ZoneBoxEntry : PanelContainer
{
    public Action<Box2>? OnBoxChanged;

    public Box2 Box
    {
        get => _box;
        set
        {
            _box = value;
            OnBoxChanged?.Invoke(value);
            Refresh();
        }
    }
    private Box2 _box;

    public ZoneBoxEntry() : this(null) { }

    public ZoneBoxEntry(Box2? box)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _box = box ?? Box2.Empty;
        LeftLineEdit.OnFocusExit += _ => Refresh();
        LeftLineEdit.OnTextEntered += args =>
        {
            if (float.TryParse(args.Text, out var value))
                ChangeBox((ref Box2 box) => box.Left = value);
        };

        BottomLineEdit.OnFocusExit += _ => Refresh();
        BottomLineEdit.OnTextEntered += args =>
        {
            if (float.TryParse(args.Text, out var value))
                ChangeBox((ref Box2 box) => box.Bottom = value);
        };

        RightLineEdit.OnFocusExit += _ => Refresh();
        RightLineEdit.OnTextEntered += args =>
        {
            if (float.TryParse(args.Text, out var value))
                ChangeBox((ref Box2 box) => box.Right = value);
        };

        TopLineEdit.OnFocusExit += _ => Refresh();
        TopLineEdit.OnTextEntered += args =>
        {
            if (float.TryParse(args.Text, out var value))
                ChangeBox((ref Box2 box) => box.Top = value);
        };

        Refresh();
    }

    public void Refresh()
    {
        LeftLineEdit.Text = Box.BottomLeft.X.ToString();
        BottomLineEdit.Text = Box.BottomLeft.Y.ToString();
        RightLineEdit.Text = Box.TopRight.X.ToString();
        TopLineEdit.Text = Box.TopRight.Y.ToString();
    }

    private void ChangeBox(ActionRefBox2 action)
    {
        var box = Box;
        action.Invoke(ref box);
        Box = box;
    }

    private delegate void ActionRefBox2(ref Box2 box);
}
