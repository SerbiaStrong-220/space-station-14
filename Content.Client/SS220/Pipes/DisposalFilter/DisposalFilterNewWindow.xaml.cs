using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.Pipes.DisposalFilter;
using Content.Shared.Tag;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
// ReSharper disable UseCollectionExpression

namespace Content.Client.SS220.Pipes.DisposalFilter;

[GenerateTypedNameReferences]
public sealed partial class DisposalFilterNewWindow : FancyWindow
{
    public required DisposalFilterWindow MainWindow { get; init; }
    public required DisposalFilterRule Filter { get; init; }
    public required BoxContainer CurrentFilterContainer { get; set; }

    private static readonly ProtoId<TagPrototype> OreTag = "Ore";
    private const string EnvelopeComp = "Envelope";
    private const string DeliveryComp = "Delivery";
    private const string MobStateComp = "MobState";
    private const string StackComp = "Stack";

    public DisposalFilterNewWindow()
    {
        RobustXamlLoader.Load(this);
    }

    public DisposalFilterNewWindow(DisposalFilterWindow mainWindow,
        DisposalFilterRule filter,
        BoxContainer currentFilterContainer) : this()
    {
        MainWindow = mainWindow;
        Filter = filter;
        CurrentFilterContainer = currentFilterContainer;

        ProceedButtons();
    }

    private void ProceedButtons()
    {
        FilterByName.OnPressed += _ => OpenNameFilterWindow();
        FilterIsOre.OnPressed += _ => ToggleInWhitelist(OreTag);
        FilterIsMob.OnPressed += _ => ToggleInWhitelist(MobStateComp);
        FilterIsStackable.OnPressed += _ => ToggleInWhitelist(StackComp);
        FilterIsMail.OnPressed += _ =>
        {
            ToggleInWhitelist(EnvelopeComp);
            ToggleInWhitelist(DeliveryComp);
        };
    }

    private void OpenNameFilterWindow()
    {
        var byNameWindow = new DisposalFilterByNameWindow();

        var nameFilter = Filter.EnsureFilter<NameContainsDisposalFilter>();
        if (nameFilter is { ContainNames.Count: > 0 })
            byNameWindow.FilterByNameLineEdit.SetText(string.Join(", ", nameFilter.ContainNames));

        byNameWindow.OpenCentered();

        byNameWindow.ConfirmFilterButton.OnPressed += _ =>
        {
            var names = byNameWindow.FilterByNameLineEdit.Text
                .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                .ToList();

            Filter.EnsureFilter<NameContainsDisposalFilter>().AddEntry(names);
            MainWindow.Populate();

            byNameWindow.Close();
        };
    }

    private void ToggleInWhitelist(object value)
    {
        Filter.EnsureFilter<WhitelistDisposalFilter>().AddEntry(value);
        MainWindow.Populate();
    }
}
