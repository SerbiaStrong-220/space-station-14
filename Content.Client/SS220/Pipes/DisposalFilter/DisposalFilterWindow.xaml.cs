using System.Linq;
using System.Numerics;
using Content.Client.SS220.UserInterface;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.Pipes.DisposalFilter;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.Pipes.DisposalFilter;

[GenerateTypedNameReferences]
public sealed partial class DisposalFilterWindow : FancyWindow
{
    // ReSharper disable ArrangeObjectCreationWhenTypeEvident

    public event Action<List<DisposalFilterRule>, Direction>? OnConfirm;

    public List<DisposalFilterRule> FilterRules = new();
    public Direction BaseDir;

    private static readonly Thickness FilterTextMargin = new Thickness(5, 0, 0, 0);

    private const string NewFilterTexturePath = "/Textures/SS220/Interface/Misc/pipe_filter/white_plus.png";
    private const string ClearFilterTexturePath = "/Textures/SS220/Interface/Misc/pipe_filter/clear_filter.png";

    private static readonly Color NewFilterColor = Color.FromHex("#468847");
    private static readonly Color NewFilterTextureColor = Color.FromHex("#c8c8c8");

    private static readonly Color ClearFilterColor = Color.FromHex("#A51E07");
    private static readonly Color ClearFilterTextureColor = Color.FromHex("#c8c8c8");

    private static readonly Thickness SubItemsContainerMargin = new Thickness(2, 2, 2, 2);
    private static readonly Thickness SubContainerMargin = new Thickness(2);

    private static readonly Vector2 RemoveButtonSize = new Vector2(20, 20);

    private static readonly Vector2 RequiredAllButtonSize = new Vector2(60, 32);

    public DisposalFilterWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    private void UpdateActiveFilters(DisposalFilterRule filter, BoxContainer filterContainer)
    {
        filterContainer.RemoveAllChildren();

        var totalSubItems = 0;

        foreach (var condition in filter.Conditions.ToList())
        {
            var subItemsContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                Margin = SubItemsContainerMargin,
            };

            var subItems = condition.GetSubItems(cond =>
                {
                    filter.Conditions.Remove(cond);
                    OnConfirm?.Invoke(FilterRules, BaseDir);
                    UpdateActiveFilters(filter, filterContainer);
                })
                .ToList();

            totalSubItems += subItems.Count;

            foreach (var (text, removeAction) in subItems)
            {
                var subContainer = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    Margin = SubContainerMargin,
                };

                var label = new Label
                {
                    Text = text,
                    HorizontalExpand = true,
                };

                var removeButton = new Button
                {
                    Text = Loc.GetString("filter-delete-text"),
                    MinSize = RemoveButtonSize,
                    ToolTip = Loc.GetString("filter-delete-filter"),
                };

                removeButton.OnPressed += _ =>
                {
                    removeAction();
                    OnConfirm?.Invoke(FilterRules, BaseDir);
                    UpdateActiveFilters(filter, filterContainer);
                };

                subContainer.AddChild(label);
                subContainer.AddChild(removeButton);
                subItemsContainer.AddChild(subContainer);
            }

            filterContainer.AddChild(subItemsContainer);
        }

        if (totalSubItems >= 2)
        {
            var requiredAllButton = new ShapeButton
            {
                Text = Loc.GetString("filter-require-all"),
                MinSize = RequiredAllButtonSize,
                ToggleMode = true,
                Pressed = filter.RequiredAll,
                HorizontalAlignment = HAlignment.Center,
            };

            requiredAllButton.OnPressed += args =>
            {
                filter.RequiredAll = args.Button.Pressed;
            };

            var buttonContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalAlignment = HAlignment.Center,
                HorizontalExpand = true,
                Margin = SubItemsContainerMargin,
            };

            buttonContainer.AddChild(requiredAllButton);
            filterContainer.AddChild(buttonContainer);
        }
    }

    public void Populate()
    {
        FilterByDirectionContainer.RemoveAllChildren();
        NoCriterialDirectionOption.Clear();

        foreach (var filter in FilterRules)
        {
            var dirLoc = Loc.GetString($"zzzz-fmt-direction-{filter.OutputDir}");
            NoCriterialDirectionOption.AddItem(dirLoc, (int)filter.OutputDir);

            var container = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
            };

            var label = new RichTextLabel
            {
                Text = Loc.GetString("filter-direction", ("direction", dirLoc)),
                HorizontalAlignment = HAlignment.Left,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                Margin = FilterTextMargin,
            };

            var newFilterButton = new ShapeButton
            {
                ModulateSelfOverride = NewFilterColor,
                Children =
                {
                    new TextureRect
                    {
                        TexturePath = NewFilterTexturePath,
                        HorizontalAlignment = HAlignment.Center,
                        Modulate = NewFilterTextureColor,
                    },
                },
                ToolTip = Loc.GetString("filter-new-filter-tooltip"),
            };

            var clearFilterRule = new ShapeButton
            {
                ModulateSelfOverride = ClearFilterColor,
                Children =
                {
                    new TextureRect
                    {
                        TexturePath = ClearFilterTexturePath,
                        HorizontalAlignment = HAlignment.Center,
                        Modulate = ClearFilterTextureColor,
                    },
                },
                ToolTip = Loc.GetString("filter-clear-filter-tooltip"),
            };

            clearFilterRule.OnPressed += _ =>
            {
                filter.Clear();
                OnConfirm?.Invoke(FilterRules, BaseDir);
            };

            container.AddChild(label);
            container.AddChild(newFilterButton);
            container.AddChild(clearFilterRule);

            var currentFilterContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
            };

            UpdateActiveFilters(filter, currentFilterContainer);
            newFilterButton.OnPressed += _ =>
            {
                var newWindow = new DisposalFilterNewWindow(this, filter, currentFilterContainer)
                {
                    MainWindow = this,
                    Filter = filter,
                    CurrentFilterContainer = currentFilterContainer,
                };
                newWindow.OpenCentered();
            };

            FilterByDirectionContainer.AddChild(container);
            FilterByDirectionContainer.AddChild(currentFilterContainer);

            var lowDivider = new PanelContainer
            {
                StyleClasses = { StyleBase.ClassLowDivider },
                HorizontalExpand = true,
            };

            FilterByDirectionContainer.AddChild(lowDivider);
        }

        NoCriterialDirectionOption.TrySelectId((int)BaseDir);
        NoCriterialDirectionOption.OnItemSelected += item =>
        {
            BaseDir = (Direction)item.Id;
            NoCriterialDirectionOption.TrySelectId(item.Id);
        };

        ConfirmButton.OnPressed += _ =>
        {
            OnConfirm?.Invoke(FilterRules, BaseDir);
            Close();
        };
    }
}
