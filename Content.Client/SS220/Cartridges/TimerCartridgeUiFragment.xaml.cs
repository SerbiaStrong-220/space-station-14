using System.Globalization;
using Content.Shared.SS220.Cartridges;
using Content.Shared.SS220.Cartridges.Timer;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.SS220.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class TimerCartridgeUiFragment : BoxContainer
{
    public TimerCartridgeUiState UiState { get; private set; } = default!;

    public event Action<TimeSpan>? OnTimerEnable;
    public event Action? OnTimerDisable;
    public event Action? OnNotifyToggle;

    private DateTime _currentTime;
    private TimeSpan _shiftLength;

    public bool TimerActive { get; private set; }

    private float _syncTimer;
    private float _updateTimer;

    public TimeSpan Timer { get; private set; } = TimeSpan.Zero;
    public bool TimerNotify;

    private Label? _timerLineHours;
    private Label? _timerLineMinutes;
    private Label? _timerLineSeconds;

    public TimerCartridgeUiFragment()
    {
        RobustXamlLoader.Load(this);

        ToggleTimer.OnPressed += HandleTimerOnPressed;
        NotificationCheck.OnPressed += (args) =>
        {
            TimerNotify = !TimerNotify;
            OnNotifyToggle?.Invoke();
        };
    }

    private void HandleTimerOnPressed(BaseButton.ButtonEventArgs args)
    {
        if (TimerActive)
        {
            TimerActive = false;
            OnTimerDisable?.Invoke();
            return;
        }

        // we have nothing to do
        if (Timer == TimeSpan.Zero)
            return;

        TimerActive = true;
        OnTimerEnable?.Invoke(Timer);

        UpdateUI();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (TimerActive)
        {
            _updateTimer += args.DeltaSeconds;

            if (_updateTimer > 1)
            {
                Timer -= TimeSpan.FromSeconds(_updateTimer);

                if (Timer < TimeSpan.Zero)
                {
                    // note: don't perform any further actions, it's should be handled by server
                    EndTimer();
                    UpdateToggleButton();
                }

                _updateTimer = 0;
                UpdateTimerBox();
            }
        }

        _syncTimer += args.DeltaSeconds;
        // probably perform synchronization with server every minute?
        // only if clients will have problems with time accuracy
        if (_syncTimer > 5)
        {
            _currentTime = _currentTime.AddSeconds(_syncTimer);
            _shiftLength += TimeSpan.FromSeconds(_syncTimer);

            UpdateDateTime();
            UpdateShiftTime();

            _syncTimer = 0;
        }
    }

    public void UpdateState(TimerCartridgeUiState state)
    {
        _currentTime = state.DateTime;
        _shiftLength = state.ShiftLength;
        TimerActive = state.TimerActive;
        Timer = state.Timer;
        TimerNotify = state.TimerNotify;

        UpdateUI();
    }

    private void UpdateUI()
    {
        UpdateDateTime();
        UpdateShiftTime();
        UpdateTimerBox();
        UpdateToggleButton();
        NotificationCheck.Pressed = TimerNotify;
    }

    private void UpdateDateTime()
    {
        CurrentDate.Text = Loc.GetString("timer-cartridge-ui-data-wrapper", ("data", _currentTime.ToString("dd.MM.yyyy", CultureInfo.InvariantCulture)));
        CurrentTime.Text = Loc.GetString("timer-cartridge-ui-time-wrapper", ("time", _currentTime.ToString("HH:mm", CultureInfo.InvariantCulture)));
    }

    private void UpdateShiftTime()
    {
        ShiftLength.Text = Loc.GetString("timer-cartridge-ui-shift-length-format", ("hours", _shiftLength.Hours), ("minutes", _shiftLength.Minutes));
    }

    private void UpdateToggleButton()
    {
        ToggleTimer.Text = TimerActive
            ? Loc.GetString("timer-cartridge-ui-disable-timer-button")
            : Loc.GetString("timer-cartridge-ui-enable-timer-button");
    }

    public void EndTimer()
    {
        Timer = TimeSpan.Zero;
        TimerActive = false;
    }

    private void UpdateTimerBox()
    {
        if (!TimerActive)
        {
            TimerBox.RemoveAllChildren();

            _timerLineHours = null;
            _timerLineMinutes = null;
            _timerLineSeconds = null;

            var hours = CreateTimerLineEdit(Timer.Hours, (hours) =>
                Timer = new TimeSpan(hours, Timer.Minutes, Timer.Seconds));
            var minutes = CreateTimerLineEdit(Timer.Minutes, (minutes) =>
                Timer = new TimeSpan(Timer.Hours, minutes, Timer.Seconds));
            var seconds = CreateTimerLineEdit(Timer.Seconds, (seconds) =>
                Timer = new TimeSpan(Timer.Hours, Timer.Minutes, seconds));

            TimerBox.AddChild(hours);
            TimerBox.AddChild(CreateTimerSeparator());
            TimerBox.AddChild(minutes);
            TimerBox.AddChild(CreateTimerSeparator());
            TimerBox.AddChild(seconds);
        }
        else
        {
            if (_timerLineHours == null || _timerLineMinutes == null || _timerLineSeconds == null)
            {
                TimerBox.RemoveAllChildren();

                _timerLineHours = CreateTimerLine();
                _timerLineMinutes = CreateTimerLine();
                _timerLineSeconds = CreateTimerLine();

                TimerBox.AddChild(_timerLineHours);
                TimerBox.AddChild(CreateTimerSeparator());
                TimerBox.AddChild(_timerLineMinutes);
                TimerBox.AddChild(CreateTimerSeparator());
                TimerBox.AddChild(_timerLineSeconds);
            }

            _timerLineHours.Text = Timer.Hours.ToString();
            _timerLineMinutes.Text = Timer.Minutes.ToString();
            _timerLineSeconds.Text = Timer.Seconds.ToString();
        }
    }

    private LineEdit CreateTimerLineEdit(int val, Func<int, object> onChange)
    {
        var edit = new LineEdit()
        {
            SetWidth = 40,
            PlaceHolder = "00",
            Text = val.ToString(),
        };

        edit.OnTextChanged += (args) =>
        {
            if (args.Text == string.Empty)
            {
                onChange.Invoke(0);
                return;
            }

            if (!uint.TryParse(args.Text, out var num) || num > 60)
            {
                edit.SetText("0", true);
                return;
            }

            onChange.Invoke((int)num);
        };
        return edit;
    }

    private Label CreateTimerLine()
    {
        var line = new Label()
        {
            SetWidth = 40,
            Align = Label.AlignMode.Center
        };

        return line;
    }

    private Control CreateTimerSeparator()
    {
        return new Label()
        {
            Text = ":",
            SetWidth = 20,
            Align = Label.AlignMode.Center
        };
    }
}
