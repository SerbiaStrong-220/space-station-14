using Content.Client.Message;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Roles;
using Content.Shared.StationRecords;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;
using System.Linq;

namespace Content.Client.SS220.CriminalRecords.UI;

[GenerateTypedNameReferences]
public sealed partial class RecordDetails : Control
{
    private readonly IPrototypeManager _prototype;
    private readonly IEntitySystemManager _sysMan;
    private readonly SpriteSystem _sprite;

    public RecordDetails()
    {
        RobustXamlLoader.Load(this);

        _prototype = IoCManager.Resolve<IPrototypeManager>();
        _sysMan = IoCManager.Resolve<IEntitySystemManager>();
        _sprite = _sysMan.GetEntitySystem<SpriteSystem>();

        StatusLabel.SetMarkup("[color=red][bold]В РОЗЫСКЕ[/bold][/color]");
    }

    private string CapitalizeFirstLetter(string input)
    {
        if (input.Length == 0)
            return input;
        else if (input.Length == 1)
            return char.ToUpper(input[0]).ToString();
        else
            return char.ToUpper(input[0]) + input.Substring(1);
    }

    public void LoadRecordDetails(GeneralStationRecord record)
    {
        string jobTitle = record.JobTitle;
        string? jobColor = null;
        if (!string.IsNullOrEmpty(record.JobPrototype))
        {
            var jobPrototype = _prototype.Index<JobPrototype>(record.JobPrototype);
            jobTitle = jobPrototype.LocalizedName;
            jobColor = GetJobColor(record.JobPrototype);

            var iconPrototype = _prototype.Index<StatusIconPrototype>(jobPrototype.Icon);
            JobIcon.Texture = _sprite.Frame0(iconPrototype.Icon);
        }

        if (string.IsNullOrEmpty(jobColor))
            jobColor = Color.White.ToHexNoAlpha();

        var finalJobTitle = string.IsNullOrEmpty(jobTitle) ? "Неизвестная должность" : CapitalizeFirstLetter(jobTitle);
        JobName.SetMarkup($"[color={jobColor}]{finalJobTitle}[/color]");

        var genderString = record.Gender switch
        {
            Gender.Female => Loc.GetString("identity-gender-feminine"),
            Gender.Male => Loc.GetString("identity-gender-masculine"),
            Gender.Epicene or Gender.Neuter or _ => Loc.GetString("identity-gender-person")
        };

        string species;
        if (string.IsNullOrEmpty(record.Species))
            species = "Неизвестно";
        else
            species = Loc.GetString(record.Species);

        if (record.Profile != null)
        {
            var speciesProto = _prototype.Index<SpeciesPrototype>(record.Profile.Species);
            species = Loc.GetString(speciesProto.Name);
        }

        DetailsLabel.SetMarkup($"Возраст: {record.Age}   Раса: {species}   Пол: {genderString}");

        DnaLabel.Text = $"ДНК: {(string.IsNullOrEmpty(record.DNA) ? "Неизвестно" : record.DNA)}";
        FingerprintsLabel.Text = $"Отпечатки: {(string.IsNullOrEmpty(record.Fingerprint) ? "Неизвестно" : record.Fingerprint)}";

        if (record.Profile != null && !string.IsNullOrEmpty(record.JobPrototype))
            CharVis.SetupCharacterSpriteView(record.Profile, record.JobPrototype);
        else
            CharVis.ResetCharacterSpriteView();
    }

    const float ADDITIONAL_COLOR_CHANNEL_VALUE = 0.25f;

    private string GetJobColor(string jobPrototypeId)
    {
        var departments = _prototype.EnumeratePrototypes<DepartmentPrototype>().ToList();
        departments.Sort((a, b) => a.Sort.CompareTo(b.Sort));

        foreach (var department in from department in departments
            from jobId in department.Roles
            where jobId == jobPrototypeId
            select department)
        {
            // make brighter cuz pure red/blue are too dark to be readable
            var color = department.Color;
            color = color.WithRed(MathF.Min(color.R + ADDITIONAL_COLOR_CHANNEL_VALUE, 1));
            color = color.WithGreen(MathF.Min(color.G + ADDITIONAL_COLOR_CHANNEL_VALUE, 1));
            color = color.WithBlue(MathF.Min(color.B + ADDITIONAL_COLOR_CHANNEL_VALUE, 1));
            return color.ToHex();
        }

        return string.Empty;
    }
}
