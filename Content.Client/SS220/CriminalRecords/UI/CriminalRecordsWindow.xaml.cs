// © SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.CriminalRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.CriminalRecords.UI;

[GenerateTypedNameReferences]
public sealed partial class CriminalRecordsWindow : FancyWindow
{
    public Action<(NetEntity, uint)?>? OnKeySelected;
    private bool _isPopulating = false;

    public CriminalRecordsWindow()
    {
        RobustXamlLoader.Load(this);

        RecordListing.OnItemSelected += args =>
        {
            if (_isPopulating || RecordListing[args.ItemIndex].Metadata is not ValueTuple<NetEntity, uint> cast)
            {
                Logger.DebugS("TEST","REEEEEEEETURN" + (_isPopulating ? ": POPULATING" : ""));
                return;
            }

            OnKeySelected?.Invoke(cast);
        };

        RecordListing.OnItemDeselected += _ =>
        {
            if (!_isPopulating)
                OnKeySelected?.Invoke(null);
        };
    }

    public void UpdateState(CriminalRecordConsoleState state)
    {
        Logger.DebugS("TEST", "WINDOW GOT STATE!");
        if (state.RecordListing != null)
            PopulateRecordListing(state.RecordListing, state.SelectedKey);

        if (state.SelectedRecord != null)
        {
            CharacterName.Text = state.SelectedRecord.Name;
            Details.LoadRecordDetails(state.SelectedRecord);
            PanelRightPlaceholder.Visible = false;
            PanelRight.Visible = true;
        }
        else
        {
            CharacterName.Text = "Не выбрана запись";
            PanelRightPlaceholder.Visible = true;
            PanelRight.Visible = false;
        }
    }

    private void PopulateRecordListing(Dictionary<(NetEntity, uint), CriminalRecordShort> listing, (NetEntity, uint)? selected)
    {
        if (_isPopulating)
            return;

        RecordListing.Clear();
        RecordListing.ClearSelected();

        _isPopulating = true;

        foreach (var (key, shortRecord) in listing)
        {
            var item = RecordListing.AddItem(shortRecord.Name);
            item.Metadata = key;
            if (selected != null && key.Item1 == selected.Value.Item1 && key.Item2 == selected.Value.Item2)
            {
                item.Selected = true;
            }
        }
        _isPopulating = false;

        RecordListing.SortItemsByText();
    }
}
