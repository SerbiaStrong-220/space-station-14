// © SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.CriminalRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.CriminalRecords.UI;

[GenerateTypedNameReferences]
public sealed partial class CriminalRecordsWindow : FancyWindow
{
    public Action<(NetEntity, uint)?>? OnKeySelected;
    private bool _isPopulating = false;

    public CriminalRecordsWindow()
    {
        RobustXamlLoader.Load(this);

        //Logger.DebugS("TEST", "==CREATING WINDOW!==");

        RecordListing.OnItemSelected += args =>
        {
            if (_isPopulating)
            {
                //Logger.DebugS("TEST","REEEEEEEETURN" + (_isPopulating ? ": POPULATING" : ""));
                return;
            }

            //Logger.DebugS("SENT KEY!", "=====SENT KEY!");
            OnKeySelected?.Invoke(args.Metadata.Key);
        };

        RecordListing.OnItemDeselected += _ =>
        {
            if (!_isPopulating)
            {
                //Logger.DebugS("SENT KEY!", "=====UNSELECTED!");
                OnKeySelected?.Invoke(null);
            }
            else
            {
                //Logger.DebugS("SENT KEY!", "=====TRIED UNSELECTED BUT POPULATING!");
            }
        };

        RecordSearch.OnTextChanged += OnSearchChanged;
    }

    private void OnSearchChanged(LineEdit.LineEditEventArgs args)
    {
        RecordListing.Filter = args.Text;
        RecordListing.RebuildList();
    }

    public void UpdateState(CriminalRecordConsoleState state)
    {
        // Logger.DebugS("TEST", "WINDOW GOT STATE!");
        if (state.RecordListing != null)
            PopulateRecordListing(state.RecordListing, state.SelectedKey);

        if (state.SelectedRecord != null)
        {
            //Logger.DebugS("STATUS", "=====SELECTED!");
            CharacterName.Text = state.SelectedRecord.Name;
            Details.LoadRecordDetails(state.SelectedRecord);
            PanelRightPlaceholder.Visible = false;
            PanelRight.Visible = true;
        }
        else
        {
            //Logger.DebugS("STATUS", "=====NO SELECTED!");
            CharacterName.Text = "Не выбрана запись";
            PanelRightPlaceholder.Visible = true;
            PanelRight.Visible = false;
        }
    }

    private void PopulateRecordListing(Dictionary<(NetEntity, uint), CriminalRecordShort>? listing, (NetEntity, uint)? selected)
    {
        if (_isPopulating)
            return;

        //Logger.DebugS("TEST", "POPULATING LIST!");

        _isPopulating = true;

        RecordListing.SetItems(listing, selected);

        _isPopulating = false;

        //RecordListing.SortItemsByText();
    }
}
