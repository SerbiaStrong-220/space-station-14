using Content.Shared.SS220.CriminalRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.CriminalRecords.UI;

[GenerateTypedNameReferences]
public sealed partial class RecordList : ScrollContainer
{
    private readonly IEntitySystemManager _sysMan;
    private readonly IPrototypeManager _prototype;
    private readonly SpriteSystem _sprite;

    private List<RecordListEntry> _items;
    private RecordListEntry? _selected;

    public event Action<ItemEventArgs>? OnItemSelected;
    public event Action<ItemEventArgs>? OnItemDeselected;
    //public event Action<ItemEventArgs>? OnItemHover;

    public RecordList()
    {

        RobustXamlLoader.Load(this);

        _sysMan = IoCManager.Resolve<IEntitySystemManager>();
        _prototype = IoCManager.Resolve<IPrototypeManager>();
        _sprite = _sysMan.GetEntitySystem<SpriteSystem>();

        _items = new();
    }

    public void TryDeselect(RecordListEntry item)
    {
        if (item != _selected)
            return;

        _selected = null;
        item.SetSelectionVisuals(false);

        var args = new ItemEventArgs(item);
        OnItemDeselected?.Invoke(args);
    }

    public void Select(RecordListEntry item)
    {
        if (_selected == item)
            return;

        if (_selected != null)
            TryDeselect(item);

        _selected = item;
        item.SetSelectionVisuals(true);

        Logger.DebugS("TEST", "SELECTED");

        var args = new ItemEventArgs(item);
        OnItemSelected?.Invoke(args);
    }

    public void ClearSelected()
    {
        if (_selected != null)
            TryDeselect(_selected);
    }

    public void Remove(RecordListEntry item)
    {
        _items.Remove(item);
        if (item == _selected)
            ClearSelected();
        OptionContainer.RemoveChild(item);
        item.Dispose();
    }

    public void Clear()
    {
        foreach (var item in _items.ToArray())
        {
            Remove(item);
        }
    }

    public RecordListEntry AddItem(CriminalRecordShort record)
    {
        Logger.DebugS("TEST", "ADDING ENTRY!");
        var entry = new RecordListEntry(_prototype, _sprite, this);
        entry.SetupEntry(record);
        OptionContainer.AddChild(entry);
        _items.Add(entry);
        entry.Pressed += OnItemPressed;
        return entry;
    }

    public void OnItemPressed(GUIBoundKeyEventArgs args, RecordListEntry item)
    {
        Logger.DebugS("PRESSED", "ITEM WAS PRESSED!");
        if (_selected != item)
            Select(item);
        else
            ClearSelected();
    }

    public sealed class ItemEventArgs
    {
        public RecordListEntry Item;

        public ItemEventArgs(RecordListEntry item)
        {
            Item = item;
        }
    }
}
