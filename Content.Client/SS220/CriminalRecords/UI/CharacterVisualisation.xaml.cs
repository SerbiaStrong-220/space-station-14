// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using System.Numerics;
using Content.Client.Humanoid;
using Content.Client.Inventory;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Content.Shared.Preferences.Loadouts;
using Content.Client.Lobby;
using Content.Shared.Clothing;
using Content.Client.Station;

namespace Content.Client.SS220.CriminalRecords.UI;

[GenerateTypedNameReferences]
public sealed partial class CharacterVisualisation : BoxContainer
{
    private readonly IEntityManager _entMan;
    private readonly IPrototypeManager _prototype;
    private EntityUid _previewDummy;
    private readonly LobbyUIController _controller = default!;

    private readonly SpriteView _face;
    private readonly SpriteView _side;

    private readonly StationSpawningSystem _spawn = default!;


    public CharacterVisualisation()
    {
        RobustXamlLoader.Load(this);

        _entMan = IoCManager.Resolve<IEntityManager>();
        _prototype = IoCManager.Resolve<IPrototypeManager>();

        _face = new SpriteView() { Scale = new Vector2(5, 5) };
        _side = new SpriteView() { Scale = new Vector2(5, 5), OverrideDirection = Direction.East };

        AddChild(_face);
        AddChild(_side);
    }

    public void ResetCharacterSpriteView()
    {
        _face.SetEntity(null);
        _side.SetEntity(null);
        _entMan.DeleteEntity(_previewDummy);
    }

    public void SetupCharacterSpriteView(HumanoidCharacterProfile profile, string jobPrototype)
    {
        HumanoidAppearanceSystem appearanceSystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<HumanoidAppearanceSystem>();

        _entMan.DeleteEntity(_previewDummy);

        _previewDummy = _entMan.SpawnEntity(_prototype.Index<SpeciesPrototype>(profile.Species).DollPrototype, MapCoordinates.Nullspace);
        appearanceSystem.LoadProfile(_previewDummy, profile);
        var realjobprototype = _prototype.Index<JobPrototype>(jobPrototype ?? SharedGameTicker.FallbackOverflowJob);
        GiveDummyJobClothesLoadout(_previewDummy, profile, realjobprototype);

        _face.SetEntity(_previewDummy);
        _side.SetEntity(_previewDummy);
    }

    public void GiveDummyJobClothesLoadout(EntityUid dummy, HumanoidCharacterProfile profile, JobPrototype job)
    {
        ClientInventorySystem inventorySystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<ClientInventorySystem>();
        if (!inventorySystem.TryGetSlots(dummy, out var slots))
            return;
        GiveDummyJobClothes(dummy, profile, job);
        _prototype.TryIndex<RoleLoadoutPrototype>(LoadoutSystem.GetJobPrototype(job.ID), out var roleLoadoutProto);
        // var jobLoadout = LoadoutSystem.GetJobPrototype(job?.ID);

        RoleLoadout? loadout = null;

        // Clone so we don't modify the underlying loadout.
        profile?.Loadouts.TryGetValue(LoadoutSystem.GetJobPrototype(job.ID), out loadout);
        loadout = loadout?.Clone();

        if (loadout == null && roleLoadoutProto != null)
        {
            loadout = new RoleLoadout(roleLoadoutProto.ID);
            loadout.SetDefault(_prototype);
            GiveDummyLoadout(dummy, loadout);
        }

    }


    public void GiveDummyLoadout(EntityUid uid, RoleLoadout? roleLoadout)
    {
        if (roleLoadout == null)
            return;
        foreach (var group in roleLoadout.SelectedLoadouts.Values)
        {
            foreach (var loadout in group)
            {
                if (!_prototype.TryIndex(loadout.Prototype, out var loadoutProto))
                    continue;

                _spawn.EquipStartingGear(uid, _prototype.Index(loadoutProto.Equipment));
            }
        }
    }

    public void GiveDummyJobClothes(EntityUid dummy, HumanoidCharacterProfile profile, JobPrototype job)
    {
        ClientInventorySystem inventorySystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<ClientInventorySystem>();
        if (!inventorySystem.TryGetSlots(dummy, out var slots))
            return;

        // Apply loadout
        if (profile.Loadouts.TryGetValue(job.ID, out var jobLoadout))
        {
            foreach (var loadouts in jobLoadout.SelectedLoadouts.Values)
            {
                foreach (var loadout in loadouts)
                {
                    if (!_prototype.TryIndex(loadout.Prototype, out var loadoutProto))
                        continue;

                    // TODO: Need some way to apply starting gear to an entity coz holy fucking shit dude.
                    var loadoutGear = _prototype.Index(loadoutProto.Equipment);

                    foreach (var slot in slots)
                    {
                        var itemType = loadoutGear.GetGear(slot.Name);

                        if (inventorySystem.TryUnequip(dummy, slot.Name, out var unequippedItem, silent: true, force: true, reparent: false))
                        {
                            _entMan.DeleteEntity(unequippedItem.Value);
                        }

                        if (itemType != string.Empty)
                        {
                            var item = _entMan.SpawnEntity(itemType, MapCoordinates.Nullspace);
                            inventorySystem.TryEquip(dummy, item, slot.Name, true, true);
                        }
                    }
                }
            }
        }

        if (job.StartingGear == null)
            return;

        var gear = _prototype.Index<StartingGearPrototype>(job.StartingGear);

        foreach (var slot in slots)
        {
            var itemType = gear.GetGear(slot.Name);

            if (inventorySystem.TryUnequip(dummy, slot.Name, out var unequippedItem, silent: true, force: true, reparent: false))
            {
                _entMan.DeleteEntity(unequippedItem.Value);
            }

            if (itemType != string.Empty)
            {
                var item = _entMan.SpawnEntity(itemType, MapCoordinates.Nullspace);
                inventorySystem.TryEquip(dummy, item, slot.Name, true, true);
            }
        }
    }

}
