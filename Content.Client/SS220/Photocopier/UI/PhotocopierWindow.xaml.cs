using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.Photocopier;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.Photocopier.UI;

[GenerateTypedNameReferences]
public sealed partial class PhotocopierWindow : FancyWindow
{
    public event Action? EjectButtonPressed;
    public event Action? StopButtonPressed;
    public event Action<int>? CopyButtonPressed;
    public event Action<int, string, string, string>? PrintButtonPressed;

    private int _copyAmount = 1;

    public PhotocopierWindow()
    {
        RobustXamlLoader.Load(this);

        AmountLineEdit.OnTextChanged += OnAmountChanged;

        EjectButton.OnPressed += _ => EjectButtonPressed?.Invoke();
        CopyButton.OnPressed += _ => CopyButtonPressed?.Invoke(_copyAmount);
        StopButton.OnPressed += _ => StopButtonPressed?.Invoke();
        //PrintButton.OnPressed += _ => PrintButtonPressed?.Invoke(_copyAmount);
    }

    private void OnAmountChanged(LineEdit.LineEditEventArgs args)
    {
        if (!int.TryParse(AmountLineEdit.Text, out _copyAmount) || _copyAmount <= 0)
            _copyAmount = 1;
    }

    public void UpdateState(PhotocopierUiState state)
    {
        var isPrinting = state.PrintQueueLength > 0;
        var canPrint = state is { TonerRemaining: > 0 } && !isPrinting;
        PrintButton.Disabled = !canPrint;
        CopyButton.Disabled = !canPrint || !state.IsPaperInserted;

        StopButton.Disabled = !isPrinting;

        TonerBar.Value = state.TonerRemaining;
        ChargePercentage.Text = (int)(state.TonerRemaining * 100) + " %";
        EjectButton.Disabled = !state.IsPaperInserted || state.IsSlotLocked;

        PaperStatusLabel.SetMarkup(Loc.GetString(
            state.IsPaperInserted
            ?"photocopier-ui-scan-surface-item"
            :"photocopier-ui-scan-surface-empty"));

        string statusLabelText;
        if (isPrinting)
        {
            var queueLenString = (state.PrintQueueLength - 1).ToString();
            statusLabelText = Loc.GetString("photocopier-ui-status-printing", ("queue", queueLenString));
        }
        else if (state.TonerRemaining <= 0)
            statusLabelText = Loc.GetString("photocopier-ui-status-out");
        else
            statusLabelText = Loc.GetString("photocopier-ui-status-idle");

        StatusLabel.SetMarkup(statusLabelText);
    }
}
