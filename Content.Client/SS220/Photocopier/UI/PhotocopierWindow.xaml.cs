using System.Collections.Immutable;
using Content.Client.Message;
using Content.Client.SS220.Photocopier.Forms;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Controls.FancyTree;
using Content.Shared.SS220.Photocopier;
using Content.Shared.SS220.Photocopier.Forms;
using Content.Shared.SS220.Photocopier.Forms.FormManagerShared;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.Photocopier.UI;

[GenerateTypedNameReferences]
public sealed partial class PhotocopierWindow : FancyWindow
{
    private const int SelectedLabelCharLimit = 21;

    [Dependency] private readonly IEntitySystemManager _sysMan = default!;
    private readonly FormManager _specificFormManager;
    private HashSet<string> _lastAvailableFormCollections = new();

    public event Action? EjectButtonPressed;
    public event Action? StopButtonPressed;
    public event Action<int>? CopyButtonPressed;
    public event Action<int, FormDescriptor>? PrintButtonPressed;

    private int _copyAmount = 1;
    private bool _canPrint = false;

    /// <summary>
    /// Used for tree repopulation and FormDescriptor construction
    /// </summary>
    private ImmutableDictionary<string, ImmutableDictionary<string, FormGroup>> _collections;

    public PhotocopierWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        if (Tree.Body.Parent is ScrollContainer scrollContainer)
        {
            scrollContainer.ReserveScrollbarSpace = true;
            scrollContainer.HScrollEnabled = true;
        }

        _specificFormManager = _sysMan.GetEntitySystem<FormManager>();
        _collections = _specificFormManager.GetImmutableFormsTree();
        OnTreeSelectionChanged(Tree.SelectedItem);

        AmountLineEdit.OnTextChanged += OnAmountChanged;

        Tree.OnSelectedItemChanged += OnTreeSelectionChanged;
        EjectButton.OnPressed += _ => EjectButtonPressed?.Invoke();
        CopyButton.OnPressed += _ => CopyButtonPressed?.Invoke(_copyAmount);
        StopButton.OnPressed += _ => StopButtonPressed?.Invoke();
        PrintButton.OnPressed += OnPrintButtonPressed;
    }

    private void UpdatePrintButton()
    {
        PrintButton.Disabled = !_canPrint || Tree.SelectedItem == null;
    }

    public void UpdateState(PhotocopierUiState state)
    {
        var isPrinting = state.PrintQueueLength > 0;
        _canPrint = state is { TonerRemaining: > 0 } && !isPrinting;
        CopyButton.Disabled = !_canPrint || !state.IsPaperInserted;
        StopButton.Disabled = !isPrinting;
        UpdatePrintButton();

        TonerBar.Value = state.TonerRemaining;
        ChargePercentage.Text = (int)(state.TonerRemaining * 100) + " %";
        EjectButton.Disabled = !state.IsPaperInserted || state.IsSlotLocked;

        PaperStatusLabel.SetMarkup(Loc.GetString(
            state.IsPaperInserted
            ?"photocopier-ui-scan-surface-item"
            :"photocopier-ui-scan-surface-empty"));

        string statusLabelText;
        if (isPrinting)
        {
            var queueLenString = (state.PrintQueueLength - 1).ToString();
            statusLabelText = Loc.GetString("photocopier-ui-status-printing", ("queue", queueLenString));
        }
        else if (state.TonerRemaining <= 0)
            statusLabelText = Loc.GetString("photocopier-ui-status-out");
        else
            statusLabelText = Loc.GetString("photocopier-ui-status-idle");

        StatusLabel.SetMarkup(statusLabelText);

        if (!state.AvailableFormCollections.SetEquals(_lastAvailableFormCollections))
        {
            _lastAvailableFormCollections = state.AvailableFormCollections;
            RepopulateTreeWithAvailableCollections();
        }
    }

    private void RepopulateTreeWithAvailableCollections()
    {
        Dictionary<string, ImmutableDictionary<string, FormGroup>> availableFormTree = new();

        foreach (var collectionId in _lastAvailableFormCollections)
        {
            if (!_collections.TryGetValue(collectionId, out var collection))
                continue;

            availableFormTree.Add(collectionId, collection);
        }

        RepopulateTree(availableFormTree);
    }

    private void RepopulateTree(IDictionary<string, ImmutableDictionary<string, FormGroup>> formTree)
    {
        Tree.Clear();

        foreach (var collectionPair in formTree)
        {
            foreach (var formGroupPair in collectionPair.Value)
            {
                AddEntry(null, formGroupPair.Value, collectionPair.Key);
            }
        }

        Tree.SetAllExpanded(false);
    }

    private TreeItem? AddEntry(TreeItem? parent, FormGroup group, string collectionId)
    {
        var item = Tree.AddItem(parent);
        item.Label.Text = group.Name;

        foreach (var form in group.Forms)
        {
            var descriptor = new FormDescriptor(
                collectionId,
                group.GroupId,
                form.Key
            );
            AddEntry(item, form.Value, descriptor);
        }

        return item;
    }

    private TreeItem? AddEntry(TreeItem? parent, Form entry, FormDescriptor descriptor)
    {
        var item = Tree.AddItem(parent);
        item.Label.Text = entry.PhotocopierTitle;
        item.Metadata = descriptor;

        return item;
    }

    private void OnTreeSelectionChanged(TreeItem? item)
    {
        UpdatePrintButton();

        string labelText;
        if (item != null && item.Metadata is FormDescriptor)
        {
            labelText = item.Label.Text ?? Loc.GetString("photocopier-ui-no-doc-title");
            if (labelText.Length > SelectedLabelCharLimit)
            {
                labelText = labelText[..(SelectedLabelCharLimit - 3)] + "...";
            }
        }
        else
            labelText = Loc.GetString("photocopier-ui-no-doc");

        SelectedFormLabel.SetMarkup(labelText);
    }

    private void OnAmountChanged(LineEdit.LineEditEventArgs args)
    {
        if (!int.TryParse(AmountLineEdit.Text, out _copyAmount) || _copyAmount <= 0)
            _copyAmount = 1;
    }

    private void OnPrintButtonPressed(BaseButton.ButtonEventArgs args)
    {
        var item = Tree.SelectedItem;
        var metadata = item?.Metadata;

        if (metadata is FormDescriptor descriptor)
        {
            PrintButtonPressed?.Invoke(_copyAmount, descriptor);
        }
    }
}
