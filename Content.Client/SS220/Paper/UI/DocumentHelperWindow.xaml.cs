// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.SS220.Paper.Systems;
using Content.Shared.SS220.Paper;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SS220.Paper.UI;

[GenerateTypedNameReferences]
public sealed partial class DocumentHelperWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    private const string DocumentHelperOptionLocPrefix = "document-helper-option-";

    private readonly SharedDocumentHelperSystem _documentHelper;

    private Dictionary<DocumentHelperOptions, BoxContainer> _optionContainer = [];

    public event Action<string>? OnButtonPressed;

    public DocumentHelperWindow(DocumentHelperOptions options = DocumentHelperOptions.All)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        _documentHelper = _entityManager.System<DocumentHelperSystem>();

        CheckNeedServerInfo(options);

        var optionValuesPair = _documentHelper.GetOptionValuesPair(options, _player.LocalSession?.AttachedEntity);
        GenerateOptions(optionValuesPair);
    }

    public void GenerateOptions(Dictionary<DocumentHelperOptions, List<string>> optionValuesPair)
    {
        foreach (var (option, values) in optionValuesPair)
        {
            BoxContainer container;
            if (_optionContainer.TryGetValue(option, out var dictContainer))
            {
                container = dictContainer;
                container.DisposeAllChildren();
            }
            else
            {
                container = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    VerticalAlignment = VAlignment.Center,
                };

                OptionsContainer.AddChild(container);
            }

            var label = new Label
            {
                Text = Loc.GetString($"{DocumentHelperOptionLocPrefix + option.ToString().ToLower()}")
            };
            container.AddChild(label);

            var buttonsContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical
            };
            foreach (var value in values)
            {
                var button = new Button
                {
                    Text = value
                };
                button.OnPressed += _ => OnButtonPressed?.Invoke(button.Text);
                buttonsContainer.AddChild(button);
            }
            container.AddChild(buttonsContainer);

            _optionContainer.Add(option, container);
        }
    }

    public bool CheckNeedServerInfo(DocumentHelperOptions options)
    {
        return (options & DocumentHelperOptions.Station) != 0;
    }

    public void UpdateState(DocumentHelperBuiState state)
    {
        GenerateOptions(state.OptionValuesPair);
    }
}
