// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using System.Text;
using Content.Shared.SS220.Surgery.Graph;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.Surgery.UiParts;

[GenerateTypedNameReferences]
public sealed partial class OperationDescription : Control
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    private SurgeryGraphSystem _surgeryGraph = default!;

    private bool _dataLocked = false;
    public bool DataLocked
    {
        get => _dataLocked;
        set
        {
            _dataLocked = value;
            LockIcon.Visible = value;
        }
    }

    public string NodeDataTabulation = "  ";
    public string NodeSeparator = "----";

    public OperationDescription()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void InjectDependencies(IEntityManager entityManager)
    {
        _surgeryGraph = entityManager.System<SurgeryGraphSystem>();
    }

    public void ShowDescription(ProtoId<SurgeryGraphPrototype> id)
    {
        if (DataLocked)
            return;

        if (!_prototypeManager.TryIndex(id, out var surgeryProto))
        {
            OperationName.Text = "#err";
            Description.Text = null;
            return;
        }

        OperationName.Text = Loc.GetString(surgeryProto.NameLocPath);

        StringBuilder builder = new();

        builder.AppendLine(Loc.GetString(surgeryProto.DescriptionLocPath));
        AddOperationSteps(surgeryProto, builder);

        Description.Text = builder.ToString();
    }

    private void AddOperationSteps(SurgeryGraphPrototype graph, StringBuilder builder)
    {
        var nodes = graph.Nodes;

        foreach (var node in nodes)
        {
            AddNodeInfo(node, builder);
            builder.AppendLine(NodeSeparator);
        }
    }

    private void AddNodeInfo(SurgeryGraphNode node, StringBuilder builder)
    {
        if (node.Edges.Count == 0)
            return;

        builder.AppendLine(Loc.GetString("operation-description-node-name", ("name", node.Name)));
        builder.AppendLine(_surgeryGraph.Description(node));

        foreach (var edge in node.Edges)
        {
            builder.AppendLine(Loc.GetString("operation-description-edge-to", ("to", edge.Target)));
            AddConditionInfo(edge, builder);
        }
    }

    private void AddConditionInfo(SurgeryGraphEdge edge, StringBuilder builder)
    {
        if (edge.Conditions.Count == 0)
            return;

        builder.AppendLine("operation-description-condition-section-name");

        foreach (var condition in edge.Conditions)
        {
            var info = condition.ConditionDescriptionLocPath();
            builder.Append(NodeDataTabulation);
            builder.AppendLine(info);
        }
    }
}
