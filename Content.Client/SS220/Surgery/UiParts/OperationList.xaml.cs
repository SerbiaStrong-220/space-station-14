// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using Content.Client.SS220.Surgery.SurgeryStartUi;
using Content.Shared.SS220.Surgery.Graph;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.Surgery.UiParts;

[GenerateTypedNameReferences]
public sealed partial class OperationList : Control
{
    public event Action<ProtoId<SurgeryGraphPrototype>, bool>? OnSurgeryClicked;
    public event Action<ProtoId<SurgeryGraphPrototype>>? OnSurgeryHovered;

    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;

    public OperationList()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void MakeList(bool ignorePerformerChecks)
    {
        var surgeryGraphsProtos = _prototypeManager.GetInstances<SurgeryGraphPrototype>();
        OperationContainer.RemoveAllChildren();

        foreach (var (id, proto) in surgeryGraphsProtos)
        {
            if (!ignorePerformerChecks)
            {
                if (_playerManager.LocalEntity == null)
                    return;

                if (!SharedSurgeryAvaibilityChecks.IsSurgeryGraphAvailablePerformer(_playerManager.LocalEntity.Value, proto, _entityManager))
                    continue;
            }

            var button = new SurgeryPerformButton(id)
            {
                StyleClasses = { "OpenBoth" },
            };

            button.Text = Loc.GetString(proto.NameLocPath);

            button.OnMouseEntered += (_) =>
            {
                OnSurgeryHovered?.Invoke(id);
            };

            button.OnPressed += (_) =>
            {
                OnSurgeryClicked?.Invoke(id, button.Pressed);
            };

            OperationContainer.AddChild(button);
        }
    }
}


