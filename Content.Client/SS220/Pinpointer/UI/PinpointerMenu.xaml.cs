// © SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using System.Numerics;
using Content.Client.SS220.UserInterface;
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.Pinpointer;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.Pinpointer.UI;

[GenerateTypedNameReferences]
public sealed partial class PinpointerMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    private readonly SpriteSystem _sprite;

    public Action<NetEntity>? OnTargetPicked;

    public HashSet<TrackedItem> CrewListCoords = [];

    private string _searchText = string.Empty;

    public PinpointerMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = _entMan.System<SpriteSystem>();
        SearchBar.OnTextChanged += OnSearchChanged;
    }

    private void OnSearchChanged(LineEdit.LineEditEventArgs args)
    {
        _searchText = args.Text.Trim().ToLower();
        PopulateList();
    }

    public void PopulateList()
    {
        CrewList.RemoveAllChildren();

        foreach (var entry in CrewListCoords)
        {
            var button = CreateTargetButton(entry.Name, entry.Job, () => OnTargetPicked?.Invoke(entry.Entity));

            if (button == null)
                continue;

            CrewList.AddChild(button);
        }
    }

    private ShapeButton? CreateTargetButton(string fullName, string? job, Action onClick)
    {
        JobIconPrototype? jobIconProto = null;
        string? jobName = null;

        if (job != null && _proto.TryIndex<JobIconPrototype>(job, out var proto))
        {
            jobIconProto = proto;
            jobName = $"{proto.LocalizedJobName} {proto.JobName}";
        }

        var matchesName = fullName.Contains(_searchText, StringComparison.CurrentCultureIgnoreCase);
        var matchesJob = jobName?.Contains(_searchText, StringComparison.CurrentCultureIgnoreCase) ?? false;

        if (!matchesName && !matchesJob)
            return null;

        var button = new ShapeButton
        {
            ToolTip = fullName,
            StyleClasses = { "OpenBoth" },
            SetHeight = 32,
            Radius = 8,
            BorderThickness = 2f,
            Margin = new Thickness(5, 0, 5, 5),
            HorizontalExpand = true,
        };

        var label = new Label
        {
            Text = fullName,
            HorizontalExpand = true,
            HorizontalAlignment = HAlignment.Center,
        };

        if (jobIconProto != null)
        {
            var jobIcon = new TextureRect
            {
                Texture = _sprite.Frame0(jobIconProto.Icon),
                ModulateSelfOverride = Color.White,
                HorizontalAlignment = HAlignment.Left,
                VerticalAlignment = VAlignment.Center,
            };

            jobIcon.TextureScale = new Vector2(2f, 2f);

            button.AddChild(jobIcon);
        }

        button.OnPressed += _ => onClick();
        button.AddChild(label);

        return button;
    }
}
