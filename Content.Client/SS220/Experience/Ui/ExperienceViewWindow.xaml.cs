// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt

using System.Linq;
using Content.Client.SS220.Experience.UiElements;
using Content.Client.UserInterface.Controls;
using Content.Shared.FixedPoint;
using Content.Shared.SS220.Experience;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.SS220.Experience.Ui;

[GenerateTypedNameReferences]
public sealed partial class ExperienceViewWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private ISawmill _sawmill = default!;
    private Dictionary<ProtoId<SkillTreeGroupPrototype>, Control> _cachedControls = new();

    private Dictionary<ProtoId<SkillTreeGroupPrototype>,
            List<(ProtoId<SkillTreePrototype>,
            SkillTreeExperienceContainer,
            FixedPoint4)>> _data = new();

    private HashSet<ProtoId<KnowledgePrototype>> _knowledges = new();

    public ExperienceViewWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sawmill = Logger.GetSawmill("experience-view-window");
    }

    public void SetKnowledge(HashSet<ProtoId<KnowledgePrototype>>? knowledges)
    {
        _knowledges = knowledges is null ? [] : knowledges;
        FinalizeUpdateKnowledge();
    }

    public void SetSkillDictionary(Dictionary<ProtoId<SkillTreeGroupPrototype>,
                        List<(ProtoId<SkillTreePrototype>,
                        SkillTreeExperienceContainer,
                        FixedPoint4)>>? data)
    {
        _data = data is null ? [] : data;
        Update();
    }

    public void SetKeyValue(ProtoId<SkillTreeGroupPrototype> key, List<(ProtoId<SkillTreePrototype>, SkillTreeExperienceContainer, FixedPoint4)> value)
    {
        _data.Remove(key);
        _data.Add(key, value);

        UpdateGroupPartially(key, value);

        FinalizeUpdateSkillTree();
    }

    private void Update()
    {
        foreach (var (key, value) in _data)
            UpdateGroupPartially(key, value);

        FinalizeUpdateSkillTree();
        FinalizeUpdateKnowledge();
    }

    private void FinalizeUpdateSkillTree()
    {
        ExperienceTreeGroupsContainer.RemoveAllChildren();

        HighDivider? divider = null;
        foreach (var control in _cachedControls.Values.OrderBy((x) => x.Name))
        {
            divider = new()
            {
                Margin = ExperienceUiStyleDefinitions.DividerThickness,
            };
            ExperienceTreeGroupsContainer.AddChild(control);
            ExperienceTreeGroupsContainer.AddChild(divider);
        }

        if (divider is not null)
            ExperienceTreeGroupsContainer.RemoveChild(divider);
    }

    private void FinalizeUpdateKnowledge()
    {
        knowledgesContainer.RemoveAllChildren();

        HighDivider? divider = null;
        foreach (var knowledge in _knowledges.OrderBy((x) => x.Id))
        {
            divider = new()
            {
                Margin = ExperienceUiStyleDefinitions.DividerThickness,
            };
            var knowledgeControl = new KnowledgeLabel();
            knowledgeControl.SetKnowledge(knowledge);
            knowledgesContainer.AddChild(knowledgeControl);
            knowledgesContainer.AddChild(divider);
        }

        if (divider is not null)
            knowledgesContainer.RemoveChild(divider);
    }

    private void UpdateGroupPartially(ProtoId<SkillTreeGroupPrototype> key, IEnumerable<(ProtoId<SkillTreePrototype>, SkillTreeExperienceContainer, FixedPoint4)>? value)
    {
        if (!_data.ContainsKey(key))
        {
            _sawmill.Error($"UI doesnt contain {key} in its data, but update was called");
            return;
        }

        if (!_prototype.Resolve(key, out var keyProto))
            return;

        _cachedControls.Remove(key);

        value ??= _data[key];

        var control = new ExperienceGroupContainer();
        control.SetGroupName(FormattedMessage.FromMarkupPermissive(Loc.GetString(keyProto.GroupName)));
        control.UpdateWithList(value, key);

        ExperienceTreeGroupsContainer.AddChild(control);
        _cachedControls.Add(key, control);
    }
}
