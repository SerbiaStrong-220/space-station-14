using Content.Client.Message;
using Content.Client.SS220.Species;
using Content.Client.UserInterface.Systems.EscapeMenu;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Lobby.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class LobbyGui : UIScreen
    {
        [Dependency] private readonly IClientConsoleHost _consoleHost = default!;
        // SS220 Species bans begin
        [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;
        [Dependency] private readonly SpeciesRequirementsManager _speciesRequirements = default!;
        // SS220 Species bans end

        public LobbyGui()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            SetAnchorPreset(MainContainer, LayoutPreset.Wide);
            SetAnchorPreset(Background, LayoutPreset.Wide);

            LobbySong.SetMarkup(Loc.GetString("lobby-state-song-no-song-text"));

            LeaveButton.OnPressed += _ => _consoleHost.ExecuteCommand("disconnect");
            OptionsButton.OnPressed += _ => UserInterfaceManager.GetUIController<OptionsUIController>().ToggleWindow();

            CollapseButton.OnPressed += _ => TogglePanel(false);
            ExpandButton.OnPressed += _ => TogglePanel(true);

            _speciesRequirements.Updated += UpdateSpeciesBanStatus; // SS220 Species bans
        }

        public void SwitchState(LobbyGuiState state)
        {
            DefaultState.Visible = false;
            CharacterSetupState.Visible = false;

            switch (state)
            {
                case LobbyGuiState.Default:
                    DefaultState.Visible = true;
                    RightSide.Visible = true;
                    break;
                case LobbyGuiState.CharacterSetup:
                    CharacterSetupState.Visible = true;

                    var actualWidth = (float) UserInterfaceManager.RootControl.PixelWidth;
                    var setupWidth = (float) LeftSide.PixelWidth;

                    if (1 - (setupWidth / actualWidth) > 0.30)
                    {
                        RightSide.Visible = false;
                    }

                    UserInterfaceManager.GetUIController<LobbyUIController>().ReloadCharacterSetup();

                    break;
            }

            UpdateSpeciesBanStatus(); // SS220 Species bans
        }

        private void TogglePanel(bool value)
        {
            RightSide.Visible = value;
            ExpandPanel.Visible = !value;
        }

        public enum LobbyGuiState : byte
        {
            /// <summary>
            ///  The default state, i.e., what's seen on launch.
            /// </summary>
            Default,
            /// <summary>
            ///  The character setup state.
            /// </summary>
            CharacterSetup
        }

        // SS220 Species bans begin
        public void UpdateSpeciesBanStatus()
        {
            var isBanned = false;
            if (_preferencesManager.Preferences?.SelectedCharacter is HumanoidCharacterProfile profile)
                isBanned = _speciesRequirements.IsBanned(profile.Species);

            ReadyButton.Disabled = isBanned;
            if (isBanned)
                ReadyButton.ToolTip = Loc.GetString("lobby-state-ready-button-tooltip-species-banned");
            else
                ReadyButton.ToolTip = null;
        }
        // SS220 Species bans end
    }
}
